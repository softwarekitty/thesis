'[$][{]\\d+:([^}]+)[}]'	1025,1322
'[^(]+[(]([^)]+)[)]'	602
'[^]]+?\\] +([0-9.]+): (\\w+) <-(\\w+)'	271,279,280,282,318,346,367,406,442,495,569,586,590,601,652,667,751,762,791,799,848,855,876,937,952,1018,1040,1041,1098,1103,1105,1106,1116,1131,1167,1206,1236,1237,1306,1333,1334,1356,1360,1370,1390,1400,1440,1467,1514,1556,1562,1568,1581,1599,1610,1622,1624,1626,1627,1643
'^[ ]*(#.*)?$'	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,961,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*)  # PS2 lines\n        \\n?\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .*$\\n?       # But any other line\n                  )*)\n        '	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,961,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'(?m)^[ ]*(?=\n)'	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'[-]'	302,323,355,422,560,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'(?P<pad>[=]*)$'	12,287,381,412,602,759,852,961,1054,1087,1221,1509,1511,1580
'\\[(?P<header>[^]]+)\\]'	12,287,381,412,602,759,852,961,1054,1087,1221,1509,1511
'\\[([^]]+)\\]'	306,322,464,467,505,534,782,1300,1404,1466
'/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n'	12,287,602,1054,1087,1263,1290,1509,1580,1594
'(^|\\n)[ ]{0,3}>[ ]?(.*)'	236,247,552,606,919,1007,1223,1420
'[^]~%\\\\{}]+'	12,412,759,852,961,1221,1511
'([(\\[{])|([)}\\])])'	1025,1082,1322,1326,1482,1504,1505
'^[ ]{0,3}[*+-][ ](.*)'	247,552,606,919,1007,1223,1420
'^[ ]{0,3}\\d+\\.[ ](.*)'	247,552,606,919,1007,1223,1420
'^[a-zA-Z_][a-zA-Z0-9_]*[(]'	322,467,505,534,712,1216,1466
'^[ ]{4,7}((\\d+\\.)|[*+-])[ ].*'	247,552,606,919,1007,1223,1420
'^[ ]{0,3}((\\d+\\.)|[*+-])[ ](.*)'	247,552,606,919,1007,1223,1420
'[\\\\]([a-zA-Z]+[*]?) ?({|\\s*\\n?)'	12,412,759,852,961,1221,1511
'  \\\\item (.*) [(](.*)[)]((?:(?:, \\d+)|(?:, \\\\[a-z]*\\{\\d+\\}))+)'	12,412,759,852,961,1221,1511
'[:]'	171,241,1249,1317,1381,1501
'^[ ]{4,}(?P<value>.*)'	236,247,919,1007,1340,1395
'/[*] #undef ([A-Z][A-Z0-9_]+) [*]/\n'	412,759,852,961,1221,1511
'([ ]+_)|(_[ ]+)|([ ]+)'	236,247,919,1007,1395
'[*]\\[(?P<abbr>[^\\]]*)\\][ ]?:\\s*(?P<title>.*)'	236,247,919,1007,1395
'^[ ]{0,3}(?P<key>[A-Za-z0-9_-]+):\\s*(?P<value>.*)'	236,247,919,1007,1395
'\n          # Match tail of: [text][id]\n          [ ]?          # one optional space\n          (?:\\n[ ]*)?   # one optional newline followed by spaces\n          \\[\n            (?P<id>.*?)\n          \\]\n        '	552,606,1223,1247,1420
'[ ]+'	126,538,1247,1288
'[.]{2,}'	1263,1290,1580,1594
'(\\D)[.]'	851,1269,1498,1561
'[.](\\D)'	851,1269,1498,1561
'^[.](\\d)'	1263,1290,1580,1594
'\\[[^]]*\\]'	190,624,729,1486
'(\\D)[.](\\D)'	851,1269,1498,1561
'([!{}:;>+\\(\\[,])\\s+'	568,807,1144,1247
'^([a-zA-Z0-9]+)([-](.*))?$'	287,580,602,1509
'/{0,2}[^]\\0\\t\\r\\v\\n ()<>{}/%[]+'	642,776,971,1203
'(^|\\n)[ ]{0,3}:[ ]{1,3}(.*?)(\\n|$)'	236,247,919,1007
'(?P<fence>^~{3,})[ ]*(\\{?\\.(?P<lang>[a-zA-Z0-9_-]*)\\}?)?[ ]*\\n(?P<code>.*?)(?P=fence)[ ]*$'	236,247,919,1007
u'\\b((?:([\\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\\s&()]|&amp;|&quot;)*(?:[^!"#$%&\'()*+,.:;<=>?@\\[\\]^`{|}~\\s]))|(?:\\((?:[^\\s&()]|&amp;|&quot;)*\\)))+)'	552,606,800,1469
'[ ]+\t'	61,166,410
'^([ ]*)'	819,1317,1501
'([ ]+)\t'	61,166,410
'\\[[^]]+]$'	1269,1469,1498
'^([^<]+)[<]?(.*)[>]?$'	241,874,1249
'.*(\\.ipy|\\.py[w]?)$'	422,747,1517
'^RADIO/radio[.](.+[.])?img$'	968,1016,1116
'^([^.]+)[.]([^.]+)[.]?([^.]*)'	241,874,1249
'<toolset.*version>(\\d+)[.](\\d*)'	241,874,1249
'\\s?((["][^"]*["]|[\'][^\']*[\'])\\s+dluohs)'	1025,1215,1423
'[@]'	241,1249
'[/]+'	447,877
'\n[ ]+\n'	1248,1488
',[ ]*([-]?\\d+|n)'	1317,1501
'(<!DOCTYPE[^]]*]>)'	210,253
'(.*) ([(][^()]*[)])'	251,1087
'^\\[([^]]+)\\](.*)$'	296,819
'.+[.](?<!log[.])zip'	241,1249
'^[-+]?([0][0-7,]*)$'	171,1381
'([^[]+)\\[([^]]+)\\]'	171,1381
'[$][{]\\d+:([^}]+)[}]'	1025,1322
'[^%]+%[^.]+[.](compile)'	241,1249
'[/*?]|\\[[^]]*/[^]]*\\]'	737,1315
'.*[/\\\\]bin[.]v2[/\\\\]'	241,1249
u'^[JB]?[0-9]+([.][0-9]*)?$'	332,689
'[^%]+%[^.]+[.](link|archive)'	241,1249
'range\\([ ]*([-]?\\d+|n).*\\)'	1317,1501
u'^([0-9]+x)*[0-9]*[*]?(s\\W)?$'	332,689
'[^%]+%testing[.](capture-output)'	241,1249
'(?mi)^[ ]*\\:RequireModule:(.*)$'	757,1087
'(^[ ]*[+]?[\\(\\)0-9/\\/\\.\\- ]+$)'	717,1229
'[^%]+%testing[.](expect-failure|expect-success)'	241,1249
'^([-]+BEGIN CERTIFICATE[-]+[\\r]*\\n.*[\\r]*^[-]+END CERTIFICATE[-]+)$'	1087,1580
'[ ]*(?P<arg>.*?=(?:(?:[^"\']*?)|(?:"[^"]*")|(?:\'[^\']*\')))[ ]*[,\r\n]'	1232,1233
'\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))'	274,573
'^((http[s]?):\\/)#?\\/?([^:\\/\\s]+)((\\/[\\w\\-\\.]+)*\\/)*([\\w\\-\\.]+[^#?\\s]+)'	1028,1039
'(?P<fence>^~{3,})[ ]*\\n(?P<code>.*?)(?P=fence)[ ]*(\\{\\.(?P<lang>[a-zA-Z0-9_-]*)\\})?[ ]*$'	236,1395
'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)[$]?(\\s*=\\s*(\\\'[^\\\']*\\\'|"[^"]*"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\\'"@]*))?'	666,707
'\n    (\\n)?                            # leading line = $1\n    (^[ \\t]*)                        # leading whitespace = $2\n    ([*+-]|\\d+[.]) [ \\t]+            # list marker = $3\n    ((?:.+?)                         # list item text = $4\n    (\\n{1,2}))\n    (?= \\n* (\\Z | \\2 ([*+-]|\\d+[.]) [ \\t]+))\n    '	55,200
' (                       # wrap whole match in $1\n                  !\\[\n                    (.*?)               # alt text = $2\n                  \\]\n\n                  [ ]?                  # one optional space\n                  (?:\\n[ ]*)?           # one optional newline followed by spaces\n\n                  \\[\n                    (.*?)               # id = $3\n                  \\]\n\n                )\n    '	55,200
' (                 # wrap whole match in $1\n                  \\[\n                    (.*?)        # link text = $2 \n                    # [for bracket nesting, see below]\n                  \\]\n\n                  [ ]?           # one optional space\n                  (?:\\n[ ]*)?    # one optional newline followed by spaces\n\n                  \\[\n                    (.*?)        # id = $3\n                  \\]\n                )\n    '	55,200
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*   # PS2 lines\n          \\n?)\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .*$\\n?       # But any other line\n                  )*)\n        '	757,1087
'["]'	445
'[#]'	74
u'[;]'	733
'^[ ]*'	1050
"(['])"	780
'([)]+)'	1267
'([(]+)'	1267
'  [ ]*'	1495
'[ ]+\n'	1247
'99[.]99'	313
'[$][^$]'	592
'^[*]...'	313
'/[.]svn'	805
'(/)?[*]$'	1381
'[$]{.+?}'	119
'^[.]{1}.*'	84
'([*]|[:])'	356
'^[_]+[ -]+'	1566
'^[0-9]+[*]'	560
'^([.]*).*$'	1469
' |,|"|=|[|]'	1618
'^[@]+|[@]+$'	1580
'take\\s*[(]'	356
'[(](.*?)[)]'	1461
'([.\\w]+)[.]'	1621
'([$]{[^}]*})'	313
'[,]?([^,=]+)='	1068
'(?=^[.]{1}.*)'	84
u'[-,^]([.]|$)'	733
'[-][-]link[-]'	356
'extdemo[.]pyd'	313
'^(.+)[&](.+)$'	560
'[\\d.]+[ ]*\n'	1101
'^(.+)[|](.+)$'	560
'(\\[[^]]*\\])'	1328
'^\\[[^][]+\\]$'	1569
'[*][*]([0-9]*)'	356
'/[.]svn|.*26.*'	805
'[#][\\dA-F]{8}'	1025
'[#][\\dA-F]{6}'	1025
'[#][\\dA-F]{3}'	1025
'^[ ]{0,3}[^ :]'	236
'^[+]{0,1}\\d*$'	1607
'\\sinet[6]?\\s'	548
'[*]|--|[^+*-]+'	1248
'^["]([^"]+)["]$'	502
'[ ]*%\\(.*?\\)s'	356
'\\w+([.]\\w+)*$'	1214
'[-][-](verbose)'	356
'\x1b\\[[0]{0,1}m'	498
'[-][-]compiler[=]'	356
'/?\\w+/\\w+[.]xsd'	436
'max[(](.+),(.+)[)]'	356
'int\\s*[(][^)]*[)]'	356
'min[(](.+),(.+)[)]'	356
'[ ]+(?P<t>[,;\\.])'	1247
'-py2[.][0-35-9][.]'	313
'[^(]+[(]([^)]+)[)]'	602
'/[ ]*[\\d.]+[ ]*kg'	1101
'(?<=\\n)[ ]+(?!\\s)'	1248
'[\\d]{2}[ ][\\d]{2}'	1113
'^Name:[ ]*([^\\s]*)'	122
'bool\\s*[(][^)]*[)]'	356
'[a-zA-Z][.][a-zA-Z]'	514
'-?(\\d*)([.]?\\d*)?'	1248
'^([0-9]+[.][0-9]+).*'	1621
'(.*)-[0-9_]+(.*[.]a)'	1249
'[1-9][0-9]*[.][0-9]+'	533
'([.]flat(\\s*?[[=]))'	356
'float\\s*[(][^)]*[)]'	356
'(.*(\\s+|[*]))(\\w+)$'	356
'[$]([A-Z_][A-Z0-9_]*)'	1258
'\\[([^]]*)\\]:(\\d*)$'	687
'/[*]\\s*f2py\\s.*[*]/'	356
'\\[\\[([^][|:]*)\\]\\]'	1454
'zc.buildout-\\S+[.]egg'	313
'^[ ]{0,3}[*+-][ ]+(.*)'	236
'[(]([^)]*)[)]\\*(\\d+)'	356
'^([^=]+)[ ]*=[ ]*(.+)$'	502
'zc.buildout[.]egg-link'	313
'(.*)-[0-9_]+(.*[.]lib)'	1249
'unicode\\s*[(][^)]*[)]'	356
'complex\\s*[(][^)]*[)]'	356
'\\(\\s*([*]|[:])\\s*\\)'	356
'(\\d[.]\\d)([.].*\\d)?$'	313
'(\\w+)[ ]+- ([\\w /,]+)'	506
'^[ ]{0,3}:[ ]{1,3}(.*)$'	1395
'(.+):([0-9]+)[:]{0,1}.*'	498
'-py\\d[.]\\d(-\\S+)?.egg'	313
'^(?:\\[([^]]+)\\])?(.*)$'	819
'^Version:[ ]*([0-9\\.]*)'	122
'^[ ]{0,3}\\d+\\.[ ]+(.*)'	236
'&#[x]*(?P<name>[0-9]+);*'	1431
'(.*)-[0-9_]+(.*[.]dylib)'	1249
'http[s]*:.*flickr.com/.*'	1285
'^[$]?([A-Z]+)[$]?(\\d+)$'	729
'.*[<]KILLLINE[>].*(\\n|$)'	356
'(\\S+[.]savespace[(].*[)])'	356
'(.*)-[0-9_]+(.*[.]dll[.]a)'	1249
'-?[0-9]+([ ]+-?[0-9]+){3}$'	729
'.*\\([+]{0,1}\\d{3,15}\\)$'	1607
'[A-Za-z0-9_.-]*[.][r][p][m]'	560
'[-d]  setuptools-\\S+[.]egg'	313
'[A-Za-z0-9_.-]*[.][d][e][b]'	560
'(.*)-[0-9_]+(.*[.]so)[.0-9]*'	1249
'^\\s*\\[Branch\\s+([^]]+)\\]'	122
'%([A-Z]), +[$](0|[1-9][0-9]*)'	1260
'^([^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)'	1491
'rootpw[ ]+--iscrypted[ ]+.*\\n'	1051
'([:][ ]*)([/])(.*)([/][ismx]*)'	1354
'AC_INIT[(][^,]*,\\s+([^)]*)[)]'	1520
'([^,(\\s]+[.]spacesaver[(][)])'	356
'/[*]+(?:[^*]+|[*]+[^/*])*[*]+/'	1023
'http[s]*:.*youtube.com/watch.*'	1285
'\\s*?- Method:\\s*(\\S*)[(].*$'	1007
'.*(\\.ipy|\\.ipynb|\\.py[w]?)$'	1580
'r\\d+\\s[|]\\s(.*)\\s[|]\\s200'	356
'^[ ]{4,7}((\\d+\\.)|[*+-])[ ]+.*'	236
'^([0-9a-f]{2}[:]){5}[0-9a-f]{2}$'	1353
'^\\s*?([*]|/\\*\\*)(?P<line>.*?)'	706
'\\[\\[([^]|[:]*)\\|([^][]*)\\]\\]'	1454
'zc.buildout(-\\S+)?[.]egg(-link)?'	313
'(\\d{1,2}) (\\d{1,2})[ ]?(\\d{4})'	1113
'(.+)[.](proto|impl|init|cleanup)$'	1621
'^[@]?[a-zA-Z0-9][a-zA-Z0-9_\\.]*$'	1118
u'Name(?:\\[([^]]+)\\])?\\s*=(.*)$'	782
'^http://gatherer[.]wizards[.]com/'	771
'/_ah/img/([-\\w]+)([=]*)([-\\w]+)?'	1004
'(\\S*)[-](\\d+\\.\\d+\\.*\\d*)\\S*'	975
'xlfcmp:(?P<version>\\d+([.]\\d+)+)'	356
'^[ ]{0,3}((\\d+\\.)|[*+-])[ ]+(.*)'	236
'[ ]{0,3}\\[\\^([^\\]]*)\\]:\\s*(.*)'	1395
'(\\S+\\s*)[.]shape\\s*=[^=]\\s*(.+)'	356
'(\\S+)\\s*[.]\\s*type\\s*[(]\\s*[)]'	356
'\\A\\s*----+[ ]*\n(.*)\n----+[ ]*\n'	1470
'/_ah/img/([-\\w:]+)([=]*)([-\\w]+)?'	1495
'(\\S+)\\s*[.]\\s*info\\s*[(]\\s*[)]'	356
'(?P<text>(\\w|[-])*[*?](\\w|[-*?])*)'	951
'(.*[.]so[.0-9]+)(.*[.]dylib)(.*[.]a)'	1249
'\\s*crt\\s*[=]\\s*(?P<path>.*)/crt1.o'	356
'distribute( version)? \\d+[.]\\d+\\S*'	313
'^\\\\[a-zA-Z]+[ ]?|^\\\\[^a-zA-Z][ ]?'	899
'ATLAS_(?P<version>\\d+[.]\\d+[.]\\d+)_'	356
"\\s*SELECT\\s+.+?\\s+FROM\\s+[']?(\\w+)"	284
'[-d]  (setuptools|distribute)-\\S+[.]egg'	313
'\\*(fore|back)ground:[ ]*(#[A-Za-z0-9]*)'	1365
'distribute-\\d+[.]\\d+\\S*-py\\d.\\d.egg'	313
'([0-9]+)[ \t]*([<>][=]?|=)[ \t]*([0-9]+)'	557
'^([0-1][0-9]|[2][0-3]|[0-9]):[0-5][0-9]$'	826
'[ ]*\\*color([0-9]*):[ ]*(#[A-Za-z0-9]*)'	1365
'(\\S+)\\s*[.]\\s*is_f_array\\s*[(]\\s*[)]'	356
'-?[0-9]+,-?[0-9]+([ ]+-?[0-9]+,-?[0-9]+)*'	729
'^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$'	1621
'(\\S+)\\s*[.]\\s*is_c_array\\s*[(]\\s*[)]'	356
'(\\S+\\s*[(].+),\\s*savespace\\s*=.+\\s*[)]'	356
'(\\S+)\\s*[.]\\s*isbyteswapped\\s*[(]\\s*[)]'	356
'(\\S+)\\s*[.]\\s*new\\s*[(]\\s*(\\S+)\\s*[)]'	356
'^([a-zA-Z0-9-]-)*force-([a-zA-Z0-9])+[.]cmd$'	119
'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)'	356
'(\\S+)\\s*[.]\\s*togglebyteorder\\s*[(]\\s*[)]'	356
'([^=]+)=(\\w+(?:[.]\\w+)*):(\\w+(?:[.]\\w+)*)$'	313
'(\\S+)\\s*[.]\\s*repeat\\s*[(]\\s*(\\S+)\\s*[)]'	356
'ESXi (\\d)+\\.(\\d)+\\.(\\d)+[ ]+build-([\\d]+)'	1381
'(\\S+)\\s*[.]\\s*setimag\\s*[(]\\s*(\\S+)\\s*[)]'	356
'(\\S+)\\s*[.]\\s*setreal\\s*[(]\\s*(\\S+)\\s*[)]'	356
'(^(\x00|\n|\r| |:|<)|[\x00\n\r\x80-\xff]+|[ ]+$)'	585
'type\\s*[(]([^)]*)[)]\\s+(?:is|==)\\s+(.*?float)'	356
'[ ]*(/\\*\\*\\s|\\*/|\\B\\*\\s|//!)(?P<line>.*?)'	706
'(?P<group>[^,]+?)[.](?P<name>.+?):(?P<value>\\d+)'	440
'(\\S+)\\s*[.]\\s*setshape\\s*[(]\\s*(\\S+)\\s*[)]'	356
"<[fF][oO][nN][tT][ ]*[sS][iI][zZ][eE][ ]*='2'[ ]*>"	110
'^[$]?([A-Z]+)[$]?(\\d+)(:[$]?([A-Z]+)[$]?(\\d+))?$'	729
'(zc.buildout|setuptools)( version)? \\d+[.]\\d+\\S*'	313
'(?s)(?<=\\n)([|][|].*?[|][|])(?=\\n[^|]|\\n[|][^|])'	138
u'^[ ]{0,3}(?P<key>[A-Za-z0-9._-]+):\\s*(?P<value>.*)'	1340
'([0-9a-zA-Z_.]+)-([0-9a-zA-Z_.]+)-py(\\d[.]\\d).egg$'	313
'http[s]?://[www\\.]?twitter\\.com/.+/status/([0-9]+)'	340
'(\\S+)\\s*[.]\\s*setimaginary\\s*[(]\\s*(\\S+)\\s*[)]'	356
'[r][g][b][(]\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*\\d{1,3}[)]'	1025
'(zc.buildout|setuptools)-\\d+[.]\\d+\\S*-py\\d.\\d.egg'	313
'\\A\\s*(?:\\.\\..*\n)*\\s*----+[ ]*\n(.*)\n----+[ ]*\n'	1470
'[a-fA-F0-9]{8}[-]([a-fA-F0-9]{4}[-]){3}[a-fA-F0-9]{12}$'	562
'^(\\s+arrayObject\\w*\\s*=\\s*[(])[(]PyObject\\s*[*][)]'	356
'(?P<repeat> *[(]?[ ,0-9]*[)]? *)(?P<dtype>[A-Za-z0-9.]*)'	356
'(--(?P<key>\\S*)[=](?P<value>\\S*))|(--(?P<option>\\S*))'	1459
'^\\s+Table\\s+C.[0-9A-Za-z-]+\\s*[-]*\\s*([A-Z/\\s-]+)\\s*$'	1432
'[-][-]((f(90)?compiler([-]exec|)|compiler)=|help[-]compiler)'	356
'^\\[{2}(?P<uri>[^][]*)(\\]\\[(?P<description>[^][]*))?\\]{2}'	624
'(?P<wikilink>(^|(?<=[^A-Za-z]))[!]?[A-Z][a-z/]+(?:[A-Z][a-z/]+)+)'	1258
'^(\\s*)#\\s*begin\\s+wxGlade:\\s*([A-Za-z_]+\\w*)??[.]?(\\w+)\\s*$'	602
'(d  ((ext)?demo(needed)?|other)-\\d[.]\\d-py)\\d[.]\\d(-\\S+)?[.]egg'	313
' ( " ( "" | [^"]+ )* " ) | ( [a-z_][a-z0-9_]* ) | [.] | (?P<err> .)  '	1520
'[-][-]((no[-]|)(wrap[-]functions|lower)|debug[-]capi|quiet)|[-]include'	356
'{{[ ]?placeholder[ ]?\\([ ]?"(?P<placeholder>[a-zA-Z0-9]+)"[ ]?\\)[ ]?}}'	1187
'^((cdef +(extern|class))|cimport|(from .+ cimport)|(from .+ import +[*]))'	1621
'\\+?"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|\\[[^]\\\\]*(?:\\\\.[^]\\\\]*)*\\]|\\S+'	539
'[-][-]((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help[-]fcompiler))'	356
"^[A-Za-z0-9\xc2\xb5 /()'>-]+\\s+\\([0-9A-Fx]+,[0-9A-F]+\\)\\s+[1-3][C]*\\s+(.*)$"	1432
u'[ ]{1}([01]{1}[0-9]{1}|[2]{1}[0-3]{1}|[0-9]{1})[-:.]([03]{1}[05]{1})[.,: ]{0,1}'	1113
'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'	746
'(?:(?P<proto>[a-zA-i0-9]+)://)?(?P<host>[a-zA-Z0-9.-]+)(?:[:](?P<port>[0-9]+))?/?'	863
'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'	340
'[r][g][b][a][(]\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*(\\d+|\\d*\\.\\d+)[)]'	1025
'^([a-zA-Z0-9_\\-]+)([\\.][a-zA-Z0-9_\\-]+)+([:][0-9\\~\\(\\)_\\-]*)+([\\.][0-9]+)*$'	548
'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+#]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$'	340
'\n^\ncreate \\s+ (?: or \\s+ replace \\s+ )?\nfunction ( [^(]+ )\n[(] ( [^)]* ) [)]\n'	1520
'\\([ ]*-?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([ ]+-?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)){2}[ ]*\\)'	729
'(?P<line>([^"]*["][^"]*["][^"!]*|[^\\\']*\\\'[^\\\']*\\\'[^\\\'!]*|[^!\\\'"]*))!{1}(?P<rest>.*)'	356
'^([a-zA-Z0-9_\\-]+)([\\.][a-zA-Z0-9_\\-]+)+([:][/][a-zA-Z0-9\\~\\(\\)_\\-]*)+([\\.][a-zA-Z0-9\\(\\)_\\-]+)*'	548
'\n    ^(?P<ending>\\w+)\n    (?P<intact>[*]?)\n    (?P<num>\\d+)\n    (?P<append>\\w*)\n    (?P<cont>[.>])\n    '	1184
u'[ ]{1}([01]{1}[0-9]{1}|[2]{1}[0-4]{1}|[0-9]{1})[-:.]([0-6]{1}[05]{1}|\u0447\u0430\u0441\u043e\u0432)[.,: ]{0,1}'	1113
'(?P<fence>^(?:~{3,}|`{3,}))[ ]*(\\{?\\.?(?P<lang>[a-zA-Z0-9_+-]*)\\}?)?[ ]*\\n(?P<code>.*?)(?<=\\n)(?P=fence)[ ]*$'	1395
'\\s*({|}|\\[|]|//|/|\\.|\\\\\\\\|\\\\|<==|==>|<=|=>|<--|-->|<-|->|@|or|and|not|\\(|\\)|>=|=|<>|like|_|\\*|\\+|\\?)\\s*'	1488
'\n        ^[ ]*:\\w+:.*\\n                     # :option:\n        (.*\\S.*)*                          # non-blank lines\n        '	1248
'\n        ^[ ]*:\\w+:.*\\n                     # :option:\n        (.*\\S.*\\n)*                          # non-blank lines\n        '	1248
'([a-zA-Z]+[.]? \\d+\\, \\d\\d\\d\\d at \\d+(\\:\\d+)? [ap]\\.m\\. [A-Z]{1,5})|( \\((\\d+ hour(s)?(, )?)?(\\d+ minute(s)?(, )?)?(\\d+ second(s)?(, )?)?\\))'	1529
u'\\b((?:([\\w-]+):(/{1,3})|www[.])(?:(?:(?:[^\\s&()]|&amp;|&quo\nt;)*(?:[^!"#$%&\'()*+,.:;<=>?@\\[\\]^`{|}~\\s]))|(?:\\((?:[^\\s&()]|&amp;|&quot;)*\\)))+)'	1055
'^(optimized.)?group(?P<year>[0-9]{2}).(?P<group>[^.]+).mc(?P<prodyear>[0-9]{2})[_]?(?P<energy>[0-9]{1,2})(TeV)?.(?P<run>[0-9]+).(?P<name>).(?P<tag>[^.]+).(?P<suffix>.+)$'	270
'\n       (^\\.\\.[ ]*pylisting::.*\\n         # directive\n            (?:[ ]*\\n|                   # blank line or\n               [ ]+.*\\n)*)               #   indented line\n        '	1248
'\n       (^\\.\\.[ ]*pylisting::[ ]?\\S*\\n    # directive\n            (?:[ ]*\\n|                   # blank line or\n               [ ]+.*\\n)*)               #   indented line\n        '	1248
'\n        (?:^[^ ].*\\n                       # non-blank line\n            (?:[ ]*\\n |                    # blank line or\n               [ ]+.*\\n)*)                 #   indented line\n        '	1248
'\n        \\s*\n        (?P<rows>\\d+)\n        [ ]\n        (?P<cols>\\d+)\n        (?P<grid>.*?)\n        (?P<wrap>WRAP|NO_WRAP)\n        \\s+\n        (?P<num_words>\\d+)\n        \\s\n        (?P<words>.*)\n    '	1222
'\n            (?:^[ \\t]+)?               # eat spaces, tabs (opt.)\n            (<\n             (?:!--[ ])?               # comment start + space (opt.)\n             /?TMPL_[A-Z]+             # closing slash / (opt.) + statement\n             [ a-zA-Z0-9""/.=:_\\\\-]*   # this spans also comments ending (--)\n             >)\n            [\n]?                      # eat trailing newline (opt.)\n        '	220
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*)  # PS2 lines\n        \\n?\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .+$\\n?       # But any other line\n                  )*)\n        '	1580
'\n\t\t\t\t\t\t\t\t#^diff[ ]--git\n\t\t\t\t\t\t\t\t\t[ ]a/(?P<a_path>.+?)[ ]b/(?P<b_path>.+?)\\n\n\t\t\t\t\t\t\t\t(?:^similarity[ ]index[ ](?P<similarity_index>\\d+)%\\n\n\t\t\t\t\t\t\t\t   ^rename[ ]from[ ](?P<rename_from>\\S+)\\n\n\t\t\t\t\t\t\t\t   ^rename[ ]to[ ](?P<rename_to>\\S+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^old[ ]mode[ ](?P<old_mode>\\d+)\\n\n\t\t\t\t\t\t\t\t   ^new[ ]mode[ ](?P<new_mode>\\d+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^new[ ]file[ ]mode[ ](?P<new_file_mode>.+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^deleted[ ]file[ ]mode[ ](?P<deleted_file_mode>.+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^index[ ](?P<a_blob_id>[0-9A-Fa-f]+)\n\t\t\t\t\t\t\t\t\t\\.\\.(?P<b_blob_id>[0-9A-Fa-f]+)[ ]?(?P<b_mode>.+)?(?:\\n|$))?\n\t\t\t\t\t\t\t'	599
'\n\t\t\t\t\t\t\t\t#^diff[ ]--git\n\t\t\t\t\t\t\t\t\t[ ]a/(?P<a_path>\\S+)[ ]b/(?P<b_path>\\S+)\\n\n\t\t\t\t\t\t\t\t(?:^similarity[ ]index[ ](?P<similarity_index>\\d+)%\\n\n\t\t\t\t\t\t\t\t   ^rename[ ]from[ ](?P<rename_from>\\S+)\\n\n\t\t\t\t\t\t\t\t   ^rename[ ]to[ ](?P<rename_to>\\S+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^old[ ]mode[ ](?P<old_mode>\\d+)\\n\n\t\t\t\t\t\t\t\t   ^new[ ]mode[ ](?P<new_mode>\\d+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^new[ ]file[ ]mode[ ](?P<new_file_mode>.+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^deleted[ ]file[ ]mode[ ](?P<deleted_file_mode>.+)(?:\\n|$))?\n\t\t\t\t\t\t\t\t(?:^index[ ](?P<a_blob_id>[0-9A-Fa-f]+)\n\t\t\t\t\t\t\t\t\t\\.\\.(?P<b_blob_id>[0-9A-Fa-f]+)[ ]?(?P<b_mode>.+)?(?:\\n|$))?\n\t\t\t\t\t\t\t'	599
