'[aeiouy]'	866,1184
'[~:+_ -]'	1263,1290,1580,1594
'[Hh][123456]'	236,247,552,606,919,1007,1223,1395,1420
'[\\.\\-](dev|devel)$'	1263,1290,1469,1580,1594
'^[-=*_^#]{3,}\\s*$'	356,436,538,1247,1288
'[,;: ]+'	552,606,1223,1247,1420
'.py[co]$'	747,1580
'10[01].*'	340,1557
'^[ ]*(#.*)?$'	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,961,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*)  # PS2 lines\n        \\n?\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .*$\\n?       # But any other line\n                  )*)\n        '	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,961,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'(?m)^[ ]*(?=\n)'	12,82,89,287,302,323,355,412,422,602,662,759,774,849,852,866,878,1004,1012,1033,1050,1054,1074,1075,1086,1087,1115,1158,1184,1221,1257,1415,1495,1509,1511,1517,1536,1580,1594,1634
'^<\\?.*encoding=[\'"](.*?)[\'"].*\\?>'	22,38,55,60,64,65,72,94,126,220,340,472,527,683,691,707,790,881,928,1068,1122,1150,1169,1199,1269,1469,1498,1557
'(?:\\r\\n)?[ \\t]+'	220,323,355,436,510,559,728,814,925,927,936,995,1003,1068,1104,1150,1211,1269,1301,1328,1416,1439,1469,1495,1498,1536,1555
'[ \\(\\)<>@,;:\\\\"/\\[\\]\\?=]'	12,82,89,287,323,355,412,422,602,759,852,866,961,1004,1054,1074,1075,1087,1184,1221,1495,1509,1511,1517,1544,1580
'[?/:|]+'	220,323,355,436,510,559,814,925,927,936,995,1003,1068,1104,1150,1211,1269,1301,1328,1439,1469,1495,1498,1536,1555
'^(?:\\s*(?:,\\s*)?([^\\0-\\x1f\\x7f-\\xff()<>@,;:\\\\\\"/[\\]?={} \\t]+)\\s*=\\s*\\"?((?<=\\")(?:[^\\0-\\x08\\x0A-\\x1f\\x7f-\\xff\\\\\\"]|\\\\[\\0-\\x7f])*?(?=\\")|(?<!\\")[^\\0-\\x1f\\x7f-\\xff()<>@,;:\\\\\\"/[\\]?={} \\t]+(?!\\"))\\"?)(.*)$'	220,323,355,436,510,559,814,925,927,936,995,1003,1068,1104,1150,1211,1269,1301,1328,1439,1469,1495,1498,1536,1555
'[*?[]'	12,93,287,308,322,381,412,467,505,534,602,743,759,852,961,1054,1087,1216,1221,1240,1466,1509,1511,1580
'[&<]'	12,43,190,287,330,381,412,413,510,602,759,774,852,961,1054,1076,1087,1221,1509,1511,1580,1638
'[<>]'	12,287,341,412,413,510,602,759,767,774,852,961,1054,1076,1087,1221,1248,1509,1511
'[\\\\].'	12,287,412,602,619,759,852,869,961,1054,1087,1221,1292,1415,1439,1469,1509,1511,1580
'^(?:1-?)?(\\d{3})[-\\.]?(\\d{3})[-\\.]?(\\d{4})$'	82,89,302,323,355,422,849,866,878,1004,1012,1074,1075,1086,1158,1184,1495,1517,1634
'((^|[^%])(%%)*%[sy])'	302,323,355,422,425,849,866,878,1004,1012,1086,1158,1184,1495,1517,1580,1634
'[-]'	302,323,355,422,560,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'[_-]'	82,89,992,1004,1074,1075,1104,1257,1317,1386,1415,1469,1495,1501,1536,1580
'^[012TF\\*]{9}$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1580,1634
'\\s*((\\w|[-.])+)'	287,487,498,602,662,1033,1087,1257,1263,1415,1469,1509,1536,1580,1594,1634
'[ \\t\\n][ \\t\\n]+'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1580,1634
'[-\\.]'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'[-/\\.]'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'^([-+])?(\\d\\d?):?(\\d\\d)?$'	12,225,287,412,510,602,759,774,852,961,1054,1087,1221,1509,1511
'\\s*(<=?|>=?|==|!=)\\s*((\\w|[-.])+)'	287,487,498,602,662,1033,1087,1257,1415,1469,1509,1536,1580,1594,1634
'^(\\d{2})[-\\.]?(\\d{4})[-\\.]?(\\d{4})$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'^(\\d{4})[ -]?(\\d{4})[ -]?(\\d{2})[ -]?(\\d{10})$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'^(?P<area>\\d{3})[-\\ ]?(?P<group>\\d{2})[-\\ ]?(?P<serial>\\d{4})$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'^(?P<residence>\\d{10})(?P<origin>\\w{1,3})[-\\ ]?(?P<birthday>\\d{7})[-\\ ]?(?P<validity>\\d{7})[-\\ ]?(?P<checksum>\\d{1})$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1184,1495,1517,1634
'[/\\\\]'	294,322,467,503,505,534,656,712,906,1004,1216,1262,1404,1466
'^[ \\t]*'	12,31,52,188,412,597,759,852,961,1050,1054,1087,1221,1511
'^[ \t]*$'	12,54,111,132,412,759,852,961,1030,1054,1087,1089,1221,1511
'[\\r\\n]+'	43,109,182,503,656,826,906,1007,1015,1032,1258,1302,1404,1561
'([ \\t]*)'	150,304,640,662,842,851,945,1025,1054,1147,1199,1322,1505,1561
'[ \t\\)].*$'	533,587,618,793,818,1007,1015,1032,1080,1172,1266,1296,1428,1493
'(?P<pad>[=]*)$'	12,287,381,412,602,759,852,961,1054,1087,1221,1509,1511,1580
'^.*FT_TRACE_DEF[ \t]*\\([ \t]*'	533,587,618,793,818,1007,1015,1032,1080,1172,1266,1296,1428,1493
'^[ \t]*#define[ \t]+FT_COMPONENT[ \t]+trace_'	533,587,618,793,818,1007,1015,1032,1080,1172,1266,1296,1428,1493
'^(?P<century>\\d{2})?(?P<year>\\d{2})(?P<month>\\d{2})(?P<day>\\d{2})(?P<sign>[\\-+])?(?P<serial>\\d{3})(?P<checksum>\\d)$'	302,323,355,422,849,866,878,1004,1012,1086,1158,1495,1517,1634
'[]&<]'	12,287,381,412,602,759,852,961,1054,1087,1221,1509,1511
'^([ \\t]*)'	12,55,200,287,433,602,927,1003,1054,1087,1202,1509,1580
'[\\?|><:/*]"'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511,1580
u'--.*([\\n\\Z]|$)'	302,323,355,422,849,866,878,1004,1184,1273,1495,1517,1634
'[\\?|><:/*"+,;=\\[\\]]'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511,1580
'[ \t]*([^ \t]+)[ \t]+realm="([^"]*)"'	12,287,412,602,759,852,961,1054,1087,1221,1495,1509,1511
'^([-+]?)0*(\\d*)((?:\\.\\d*)?)(([eE][-+]?\\d+)?)$'	12,287,381,412,602,759,852,961,1054,1087,1221,1509,1511
'[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f]'	12,31,287,412,602,759,852,961,1054,1087,1221,1509,1511
'[][\\\\()"]'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'[][\\\\()<>@,:;".]'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'^([^ \t]+)[ \t]+(.*)$'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'(\\w+)[-_](release|version)'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'^(?P<group>[^ \t]+)[ \t]+(.*)$'	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<atom>.*?)         # non-greedy up to the next ?= is the atom\n  \\?=                   # literal ?=\n  '	12,287,412,602,759,852,961,1054,1087,1221,1509,1511
'^.*[/\\\\](.*:)\\d+\\n'	416,592,852,896,994,1007,1301,1403,1511,1560,1598
'encoding\\s*=\\s*[\'"]([^"\']+)["\']'	12,73,287,412,602,759,852,961,1221,1509,1511
'<meta.*?charset=["\\\']*(.+?)["\\\'>]'	619,869,927,1263,1292,1399,1439,1469,1535,1580,1594
'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\: '	416,592,852,896,994,1007,1301,1403,1511,1560,1598
'[.-]'	12,412,560,759,852,961,1087,1221,1511,1580
'[\\n\\r]'	305,445,1025,1225,1322,1326,1505,1630,1632,1639
'[@{} ]'	12,412,759,852,961,1054,1087,1221,1511
'["\'/]'	306,322,464,467,505,534,1007,1404,1466
'[ \\t]+'	55,261,305,908,1505,1630,1632,1638,1639
'\\$[()]'	308,322,389,467,505,534,743,1216,1466
'[\n@{}&<>]'	12,412,759,852,961,1054,1087,1221,1511
'\\$<\\d+>[/*]?'	76,737,757,1087,1205,1243,1244,1246,1540
'\\\\line([iv]+){'	12,412,759,852,961,1054,1087,1221,1511
'[\\t ]+(?![^{]*})'	308,322,389,467,505,534,743,1216,1466
'\\\\end{(?:long)?table([iv]+)}'	12,412,759,852,961,1054,1087,1221,1511
'\\\\begin{(?:long)?table([iv]+)}'	12,412,759,852,961,1054,1087,1221,1511
'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$'	322,416,467,505,534,1199,1300,1404,1466
'^\\* ([^:]*):(:|[ \t]*([^\t,\n.]+)([^ \t\n]*))[ \t\n]*'	12,412,759,852,961,1054,1087,1221,1511
'[ ,]+'	200,552,606,819,1223,1247,1420,1469
'[ \\t]*'	55,412,759,852,908,961,1221,1511
'([b:]+)'	12,412,759,852,961,1087,1221,1511
'[/\\\\ ]'	113,147,181,251,498,1087,1267,1555
'[EW]\\d{3}'	304,640,662,842,945,1199,1322,1505
'(["\\\\`])'	306,322,467,505,534,896,1007,1466
'u?r?["\\\']'	304,640,662,842,945,1025,1322,1505
'([\\13\\14])'	12,412,759,852,961,1087,1221,1511
'py:(.*?)=["\']'	113,147,181,251,498,1087,1267,1555
'(\\\\*)([,;]+)'	306,322,467,505,534,896,1007,1466
'(a(?=\\s[abc]))'	12,412,759,852,961,1087,1221,1511
'(a(?!\\s[abc]))'	12,412,759,852,961,1087,1221,1511
'[[({] | []}),;:]'	304,640,662,842,945,1025,1322,1505
'(a(?=\\s[abc]*))'	12,412,759,852,961,1087,1221,1511
'[\n\r\t\x0b\x0c]'	46,147,162,181,251,619,1087,1267
'(>[ \\t]*)(.*\\n)'	113,147,181,251,498,1087,1267,1555
'(^|\\n)[ ]{0,3}>[ ]?(.*)'	236,247,552,606,919,1007,1223,1420
'(Okay|[EW]\\d{3}):\\s(.*)'	304,640,662,842,945,1199,1322,1505
"[\t\n #$%&'()*;<=>?[{|}~]|^$"	306,322,467,505,534,896,1007,1466
'^([^.]*)\\.([^:]*):[\\t ]+(.*)'	12,412,759,852,961,1087,1221,1511
'([Ww]/)?(?:"(.*?)"|(.*?))(?:\\s*,\\s*|$)'	992,1104,1257,1386,1415,1469,1536,1580
'^(?:[78]-?)?(\\d{3})[-\\.]?(\\d{3})[-\\.]?(\\d{4})$'	302,849,878,1012,1086,1158,1495,1634
'(?<!\\\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])'	849,878,1012,1086,1158,1495,1580,1634
'^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) *(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$'	302,849,878,1012,1086,1158,1495,1634
'[ \n]*{'	12,412,759,852,961,1221,1511
'=[ =]*$'	147,162,181,251,619,1087,1267
'[<>\'"]'	220,454,666,707,927,1003,1247
'-[ -]*$'	147,162,181,251,619,1087,1267
'([\\t ]+)'	173,552,606,800,1223,1420,1469
'[ \\t]*(#)'	261,412,759,852,961,1221,1511
'^[sgydpn]+$'	322,467,505,534,712,1216,1466
'\\s*-[ef]\\s+'	420,543,596,993,1223,1420,1499
'%+ ?(.*)\n[ \t]*'	12,412,759,852,961,1221,1511
'\\+=[=+]+=\\+ *$'	147,162,181,251,619,1087,1267
'[\\\\]end{([^}]*)}'	12,412,759,852,961,1221,1511
'[\\\\]begin{([^}]*)}'	12,412,759,852,961,1221,1511
'([(\\[{])|([)}\\])])'	1025,1082,1322,1326,1482,1504,1505
'^[ ]{0,3}[*+-][ ](.*)'	247,552,606,919,1007,1223,1420
'^[ ]{0,3}\\d+\\.[ ](.*)'	247,552,606,919,1007,1223,1420
'[ \n]*{(([^{}}]|{[^}]*})*)}'	12,412,759,852,961,1221,1511
'^[ ]{4,7}((\\d+\\.)|[*+-])[ ].*'	247,552,606,919,1007,1223,1420
'([\\(,])\\s*(\\d.*?)\\s*([,\\)])'	487,1257,1263,1415,1536,1580,1594
'^[ ]{0,3}((\\d+\\.)|[*+-])[ ](.*)'	247,552,606,919,1007,1223,1420
'(?<!\\\\)([aAbBdDfFgGhHiIjlLmMnNOPrsStTUwWyYzZ])'	82,89,1004,1074,1075,1184,1495
'(?<!\\\\)([aAbBcdDEfFgGhHiIjlLmMnNOPrsStTUuwWyYzZ])'	302,323,355,422,866,1495,1517
'([^\'"<>]|"[^"]*"(?=>|/|\\s|\\w+=)|\'[^\']*\'(?=>|/|\\s|\\w+=))*(?=[<>])|.*?(?=[<>])'	220,454,666,707,927,1003,1247
'^[ \t]*(#|%:)[ \t]*(ifdef|ifndef|if|else|elif|endif|include|import|define|undef|pragma)[ \t]*(.*)\r*$'	322,467,505,534,712,1216,1466
'^\n        (?P<prefix>(?:[^\\r\\n|\\n|\\r])*?)\n        [\\ \\t]*Local\\ Variables:[\\ \\t]*\n        (?P<suffix>.*?)(?:\\r\\n|\\n|\\r)\n        (?P<content>.*?\\1End:)\n        '	305,552,606,1223,1247,1420,1505
'\n    ^\n    [ \\t]*\n    (?: while\n    |   else\n    |   def\n    |   return\n    |   assert\n    |   break\n    |   class\n    |   continue\n    |   elif\n    |   try\n    |   except\n    |   raise\n    |   import\n    |   yield\n    )\n    \\b\n'	12,287,602,1054,1087,1509,1580
'[:]'	171,241,1249,1317,1381,1501
'[<>&]'	305,407,1025,1322,1326,1505
'[\\|,]'	305,407,1025,1322,1326,1505
'[\\\\/]'	241,813,874,927,1249,1269
'([\\"\\\\])'	225,287,510,602,774,1509
'[ \t][ \t]+'	412,759,852,961,1221,1511
'^[\\t ]*\\n?$'	305,1025,1082,1322,1326,1505
'\\r[ \\t]+def '	412,759,852,961,1221,1511
'[\\._]|\\-(?=$)'	84,506,851,1269,1498,1561
'(.*)[\\\\/](.*?)$'	412,759,852,961,1221,1511
'[\\({\\[\\]}\\)\\n]'	167,468,640,659,703,1322
'^[ ]{4,}(?P<value>.*)'	236,247,919,1007,1340,1395
'[-+]?(\\d+|\\d*\\.\\d+)$'	82,89,1004,1074,1075,1495
'return.*[ \\(]..._FAILURE'	412,759,852,961,1221,1511
'\\s+select\\s*=\\s*([\\\'"]).*?\\1'	305,407,1025,1322,1326,1505
'(.*?[\\[\\{\\(,])(\\s*)([\\[\\{\\(])'	306,322,534,896,1007,1466
'(.*?[\\]\\}\\)],?)(\\s*)([\\]\\}\\)])'	306,322,534,896,1007,1466
'[\\\'|"|#|\\\\|\\[|\\]|\\{|\\}|\\(|\\)]'	167,468,640,659,703,1322
'(url\\([\'"]{0,1}\\s*(.*?)["\']{0,1}\\))'	302,849,878,1086,1495,1634
'^(["\\\'])((?:(?!\\1)[^\\\\]|\\\\.)*)\\1'	305,407,1025,1322,1326,1505
'^[ \t]*(#|%:)[ \t]*(include)[ \t]*(.*)\r*$'	294,322,467,505,534,1466
'(?P<q>[\\\'"])(.*?)(?<![^\\\\][\\\\])(?P=q)'	306,322,534,896,1007,1466
'NPT_SET_LOCAL_LOGGER\\s*\\([ "]*(\\S+)[ "]*\\)'	412,759,852,961,1221,1511
'^\\s*\\|\\s.*\\s\\|\\s*$|^\\s*\\+[=+-]+\\+\\s*$'	385,483,640,1069,1149,1583
'\n    ^\n    [ \\t]*\n    (?: if\n    |   for\n    |   while\n    |   else\n    |   def\n    |   return\n    |   assert\n    |   break\n    |   class\n    |   continue\n    |   elif\n    |   try\n    |   except\n    |   raise\n    |   import\n    |   yield\n    )\n    \\b\n'	412,759,852,961,1221,1511
'\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string\n  \\?=                   # literal ?=\n  (?=[ \\t]|$)           # whitespace or the end of the string\n  '	12,287,602,1054,1087,1509
'[, ]+'	332,689,1013,1218,1426
'[,<>()]'	322,467,505,534,1466
'[\\.\\-]'	927,1003,1269,1498,1570
'[\\+\\!]+$'	143,188,213,1094,1583
'([&<"\\\'>])'	433,927,1003,1202,1350
'(\\d+[abc])$'	1263,1290,1469,1580,1594
'^[\r\n]*(\\s*)'	143,188,213,1094,1583
'([\\$\\|\\\\])'	305,1025,1322,1326,1505
'[.~]?([abc])\\.?'	1263,1290,1469,1580,1594
'(?![\\.\\-])dev$'	1263,1290,1469,1580,1594
'^(\\.\\.)[\\/](.*)$'	322,467,505,534,1466
'([ ]+_)|(_[ ]+)|([ ]+)'	236,247,919,1007,1395
'foo-0.0.0-py[23].\\d.egg$'	1257,1415,1536,1580,1594
'[\\?\\&]gsessionid=(\\w*)'	147,181,254,438,594
'^%%([^:]*):[ \\t]*(.*)[ \\t]*$'	441,628,1054,1204,1580
'[\\-\\.](dev)[\\-\\.]?r?(\\d+)$'	1263,1290,1469,1580,1594
'^.+[:(]\\d+[:)]|^Done processing'	467,505,534,1404,1466
'^(?:852-?)?(\\d{4})[-\\.]?(\\d{4})$'	849,878,1012,1086,1158
'^[,&^\\|\\*/\\+-]|^is |^not |^in |^and |^or '	422,602,747,1517,1580
'[*]\\[(?P<abbr>[^\\]]*)\\][ ]?:\\s*(?P<title>.*)'	236,247,919,1007,1395
'(?P<tzd>[-+](?P<tzdhours>\\d\\d)(?::?(?P<tzdminutes>\\d\\d))|Z)'	211,220,1003,1076,1247
'\n          # Match tail of: [text][id]\n          [ ]?          # one optional space\n          (?:\\n[ ]*)?   # one optional newline followed by spaces\n          \\[\n            (?P<id>.*?)\n          \\]\n        '	552,606,1223,1247,1420
"\n        ^(\\#{1,6})  # \\1 = string of #'s\n        [ \\t]*\n        (.+?)       # \\2 = Header text\n        [ \\t]*\n        (?<!\\\\)     # ensure not an escaped trailing '#'\n        \\#*         # optional closing #'s (not counted)\n        \\n+\n        "	552,606,1223,1247,1420
'\n          # Match tail of: [text](/url/) or [text](/url/ "title")\n          \\(            # literal paren\n            [ \\t]*\n            (?P<url>            # \\1\n                <.*?>\n                |\n                .*?\n            )\n            [ \\t]*\n            (                   # \\2\n              ([\'"])            # quote char = \\3\n              (?P<title>.*?)\n              \\3                # matching quote\n            )?                  # title is optional\n          \\)\n        '	552,606,1223,1247,1420
'[ ]+'	126,538,1247,1288
'[()]'	624,815,1248,1486
'[-.]'	496,749,1087,1580
'[=!]='	119,1007,1015,1032
'^[.-]'	1263,1290,1580,1594
'[ \\t]'	826,828,1128,1591
'[ {}$]'	467,505,534,1466
'[.\\-]'	113,1415,1469,1580
'[?*+]+'	251,498,1087,1555
'[&<>"]'	552,606,800,1469
'[.+-]$'	1263,1290,1580,1594
'[.]{2,}'	1263,1290,1580,1594
'[()\\\\]'	642,776,971,1203
'(\\D)[.]'	851,1269,1498,1561
'[.](\\D)'	851,1269,1498,1561
'([\x0c])'	422,747,1517,1580
'[\\n\\t]'	560,1415,1469,1580
'[\t ]+\n'	61,166,356,410
'^[.](\\d)'	1263,1290,1580,1594
'[ \\t\\n]'	119,1007,1015,1032
'^\x1b[()]'	385,640,1149,1583
'^[:~._+-]+'	1263,1290,1580,1594
'[,*")([\\]]'	1263,1290,1580,1594
'^[\\t ]*\\n'	46,1050,1469,1621
'[-T:/.]|\\s+'	927,986,1003,1431
'(\\D)[.](\\D)'	851,1269,1498,1561
'([\\\\()\\r\\n])'	642,776,971,1203
'^[ \\t]*[^# \\t]'	433,927,1003,1202
':[ \\t]*(?:#.*)?$'	433,927,1003,1202
'([\n\r\t\x08\x07])'	287,602,1509,1580
'[uU][rR]?[\\\'\\"]'	602,1054,1087,1580
'[,;:]\\s*(?:  |\\t)'	640,945,1025,1505
'^([ \\t\\r\\f\\v]+)'	422,747,1517,1580
'[\\0\\t\\r\\014\\n ]+'	642,776,971,1203
'.*_([vV]\\d+\\.\\d+)$'	503,656,906,1404
'([!{}:;>+\\(\\[,])\\s+'	568,807,1144,1247
'\\s*\\(\\d+[ulUL]*\\).*'	523,946,1116,1484
'[()]|\\s=[^=]|[^=!<>]=\\s'	304,662,842,1322
'([abc]|rc)[\\-\\.](\\d+)$'	1263,1290,1580,1594
'\\s+([!{};:>+\\(\\)\\],])'	568,807,1144,1247
'(?i)[\xe1\xe9\xed\xf3\xfa]'	305,1025,1138,1505
'\\.[svn|git|hg|scc|vssscc]'	287,580,602,1509
'\\.([hc]|py|txt|sln|vcproj)$'	12,1054,1087,1580
'[\\?\\&]gsessionid=(\\w*\\-)'	254,438,594,790
'([=!]=)\\s*(None|False|True)'	640,945,1025,1505
'(?i)([aeiou]).{1,3}([aeiou])nes$'	305,1025,1138,1505
'([+\\-&|!(){}\\[\\]\\^"~*?:\\\\])'	813,913,927,1003
'(^[ \\t]*>>> |^[ \\t]*\\.\\.\\. )'	422,602,747,1517
'([=\\(\\)|\\-!@~\\"&/\\\\\\^\\$\\=])'	172,391,682,872
'(^|\\n)[ ]{0,3}:[ ]{1,3}(.*?)(\\n|$)'	236,247,919,1007
'<base\\s+href\\s*=\\s*[\'"]?([^\'">]+)'	1263,1290,1580,1594
'^<\\?xml.*?encoding=["\\\']*(.+?)["\\\'>]'	1263,1535,1580,1594
'^[= ]([*> ]) ([^- ]+)-([^ ]+) \\[ (.*) \\]'	614,947,996,1491
'<meta.*?content=["\\\']*;?charset=(.+?)["\\\'>]'	1263,1535,1580,1594
'(?i)([\xe1\xe9\xed\xf3\xfa]).*([\xe1\xe9\xed\xf3\xfa])'	305,1025,1138,1505
'.*[\\\\/]([^\\\\/]+)[\\\\/][^\\\\/]+[\\\\/]scons[\\\\/]?$'	592,896,1301,1403
'(?P<prefix>[|+ ]*)(?P<samples>\\d+), (?P<symbol>[^,]+), (?P<image>.*)'	851,1269,1561,1576
'(?i)([ -](regular|plain|italic|oblique|(semi)?bold|(ultra)?light|extra|condensed))+$'	642,776,971,1203
'(?i)([ -](regular|plain|italic|oblique|bold|semibold|light|ultralight|extra|condensed))+$'	642,776,971,1203
'(?ms)^(?P<package>[^#]\\S+)[\t ]+(?P<question>\\S+)[\t ]+(?P<type>\\S+)[\t ]+(?P<value>[^\n]*)$'	614,947,996,1491
'(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{1,2}:\\d{1,2})?$'	849,878,1495,1634
'\n                            ^\\s*\n                            (?: (?P<week>   \\d+ (?:\\.\\d*)? ) \\s* [wW]  )? \\s*\n                            (?: (?P<day>    \\d+ (?:\\.\\d*)? ) \\s* [dD]? )? \\s*\n                            (?: (?P<hour>   \\d+ (?:\\.\\d*)? ) \\s* [hH]  )? \\s*\n                            (?: (?P<minute> \\d+ (?:\\.\\d*)? ) \\s* [mM]  )? \\s*\n                            (?: (?P<second> \\d+ (?:\\.\\d*)? ) \\s* [sS]  )? \\s*\n                            $\n                            '	614,947,996,1491
'\n    \\A\\s*                      # optional whitespace at the start, then\n    (?P<sign>[-+]?)            # an optional sign, then\n    (?=\\d|\\.\\d)                # lookahead for digit or .digit\n    (?P<num>\\d*)               # numerator (possibly empty)\n    (?:                        # followed by\n       (?:/(?P<denom>\\d+))?    # an optional denominator\n    |                          # or\n       (?:\\.(?P<decimal>\\d*))? # an optional fractional part\n       (?:E(?P<exp>[-+]?\\d+))? # and optional exponent\n    )\n    \\s*\\Z                      # and optional whitespace to finish\n'	689,1054,1087,1580
'[./]'	1007,1015,1032
'[eE]'	518,787,1280
'[;,]'	1063,1254,1258
'[,;]'	262,267,268
'^[67]'	241,874,1249
'[[*?]'	1007,1015,1032
'[\n]+'	538,733,1288
'^[ab]$'	873,1580,1592
'([}{])'	52,188,597
'h[23]$'	557,1223,1420
'<H[13]'	1007,1015,1032
'[\r\n]'	43,826,1386
'[ ]+\t'	61,166,410
'[kK]ey'	1007,1015,1032
u'[\\t]'	304,1025,1322
'[%\\\\]'	1007,1015,1032
'^([ ]*)'	819,1317,1501
'[\n ]+$'	794,1025,1379
'^[67]\\.'	241,874,1249
'([ ]+)\t'	61,166,410
'([\\.,])'	1415,1469,1580
'[-/.: ]+'	1269,1469,1498
'[./\\\\]'	422,747,1517
'^[78]\\.'	241,874,1249
'[\\[\\]]'	560,767,1328
'[Tt ].*$'	813,927,1003
'\\\\?[()]'	252,1087,1495
'[\n\t\r}]'	1630,1632,1639
'[pP]ython'	12,1054,1087
'([sh]db)\\s'	560,1317,1501
'[ \t]+(?=\n)'	113,147,181
'^["<].*[>"]$'	0,139,785
'^\\${\\d+[:}]'	52,188,597
'\\s*/[/*]\\s*'	557,1223,1420
'[ \t]*\n[ \t]*'	526,1046,1642
'[Vv]ersion .*?,'	560,1317,1501
'[+-]?(\\d*)(.*)'	247,919,1007
'^[\'"](.*)[\'"]$'	308,743,1216
'else[ \\f\\t]+if'	53,171,1381
'(?<![\\\\])(\\s)'	119,225,976
'^(.+)[:(]\\d+[:)]'	306,322,464
'^@[Dd][Aa][Tt][Aa]'	531,832,846
'ERROR[: ]|failed: '	1025,1322,1505
'(^|/)Change[Ll]og$'	526,1046,1642
'(.*?)([1aAiI])(.*)'	518,757,787
'[\\/][^\\/]+[\\/]?$'	532,577,1314
'^[cC](\\:[\\\\\\/]+)'	1007,1015,1032
'ustar *\x00|[ \x00]*$'	1269,1469,1498
'^([^<]+)[<]?(.*)[>]?$'	241,874,1249
'.*(\\.ipy|\\.py[w]?)$'	422,747,1517
'(?<![\\\\\\=\\:])(\\s)'	119,225,976
'.*(\\.so|\\.py[cod]?)$'	422,747,1517
"'([..\\n]+)'\\s+(..+$)"	531,832,846
'VmRSS:[\\t ]*(\\d+) kB'	560,1317,1501
'^<type [\'"](.+)[\'"]>$'	498,602,1495
'([\\[\\]#$%&_{}^~\\\\])'	557,1223,1420
'VmSwap:[\\t ]*(\\d+) kB'	560,1317,1501
'^[ \t]*import[ \t]+([^#]+)'	12,1054,1087
'^[http|file|chrome|about].*'	1007,1015,1032
'^RADIO/radio[.](.+[.])?img$'	968,1016,1116
'[\\0\\n\\r\\032\\\'\\"\\\\]'	779,1247,1407
'^([MAGCUD_ ][MAGCUD_ ]) (.+)'	241,874,1249
'^([^.]+)[.]([^.]+)[.]?([^.]*)'	241,874,1249
'^(\\d+\\.|[-*|]|\\[\\d+\\]) .'	462,690,1119
'(\\d+)(\\s+\\d){3,}\\s+([TF])'	262,267,268
'(\\d+)(\\s+\\d+){2}\\s+([TF])'	262,267,268
'\\bnot\\s+\\S+?\\s+i[sn]\\s\\S+'	147,181,1087
'^[ \t]*from[ \t]+([^ \t]+)[ \t]+'	12,1054,1087
'^([ \\t]*>>> |^[ \\t]*\\.\\.\\. )'	422,747,1517
'<toolset.*version>(\\d+)[.](\\d*)'	241,874,1249
'\\[(?P<type>[WE])(?P<remainder>.*?)\\]'	167,640,662
'(.*[Jj]amfile\\.v2)|(.*[Bb]uild\\.jam)'	241,874,1249
'([^<>= ]+)(?:\\s*([<>=]{1,2})\\s*(.*))?$'	242,930,1323
'^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)'	531,832,846
'\\s?((["][^"]*["]|[\'][^\']*[\'])\\s+dluohs)'	1025,1215,1423
'get_ipython\\(\\)\\.magic\\(u?["\\\']%?autopx'	747,1517,1580
'.*?href\\s*=\\s*[\\\'"](?P<href>.*?)[\\\'"].*?'	278,432,1366
'^@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)'	531,832,846
u'[\\t !"#$%&\\\'()*\\-/<=>?@\\[\\\\\\]^_`{|},.]+'	571,1232,1313
'[-+]?(\\d+(\\.\\d*)?|\\d*\\.\\d+)([eE][-+]?\\d+)?'	758,1246,1540
'goog\\.provide\\s*\\(\\s*[\'"]([^\\)]+)[\'"]\\s*\\)'	240,343,1336
'goog\\.require\\s*\\(\\s*[\'"]([^\\)]+)[\'"]\\s*\\)'	240,343,1336
'^([ \\t]*In \\[\\d+\\]: |^[ \\t]*\\ \\ \\ \\.\\.\\.+: )'	422,747,1517
'^(?P<prefix>(\\d+\\.)*\\d+)(?P<c>[ab])(?P<suffix>\\d+)$'	1007,1015,1032
'(.*)\\.([0123456789]+)\\.([0123456789]+)\\.([0123456789]+)$'	241,874,1249
'(^|\n)\\d+-\\d+-\\d+[ \t]+((\\w|[.-])+[ \t]+)+<[^\n>]+>(?=$|\n)'	526,1046,1642
'^([^/]|/[^/])*\\bvoid\\s+([Tt]est\\w+)\\s*\\(\\s*(void)?\\s*\\)'	0,139,785
'^((?:|sh\\S*?|\\w+\\S+[@:]\\S+(?:\\s+\\S+)?|\\[\\S+[@:][^\\n]+\\].+)[$#%])(.*\\n?)'	251,498,1267
'([=!]=|is|is\\s+not)\\s*type(?:s\\.(\\w+)Type|\\(\\s*(\\(\\s*\\)|[^)]*[^ )])\\s*\\))'	640,945,1505
'^\\(?(?P<re>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?)??(?P<im>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?j)?\\)?$'	518,620,787
'(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}:?\\d{2})?$'	1012,1086,1580
'[@]'	241,1249
'[ -]'	1248,1269
'[ ,]'	232,619
'[mM]'	1317,1501
'[kK]'	1317,1501
'[gG]'	1317,1501
'[ _]'	1223,1420
'[/]+'	447,877
'[. -]'	1269,1498
'[:@/]'	1415,1580
'[<>=]'	1317,1501
'[/,-]'	386,1181
'["!|@]'	757,1087
'^[#/;]'	386,1181
'([{}])'	147,181
'[\\\\]'	241,1249
'[\\\\"]'	103,130
'[xh]vc0'	1317,1501
'[\\._-]'	1263,1580
'[aeiou]'	1248,1488
'[:;,] *'	757,1087
'[infINF]'	752,1194
'[ \\t:]+'	305,1505
'\n[ ]+\n'	1248,1488
'[:;, ] *'	757,1087
'[:"<>|?]'	1269,1498
'[N|n]ame'	1317,1501
'\n[ \t]*'	103,130
'[\\*\\?]'	1015,1032
'[&<]|]]>'	1076,1350
'([?*]+/?)'	636,1125
'[-+]?\\d+'	1246,1540
'[+-]?\\d+'	374,1618
'[aeiouy].'	866,1184
"([\\\\'])"	1517,1634
' ([a|b])/'	1199,1300
'[\'"\\\\]'	1248,1488
'([\\"$`])'	12,1087
'^[ \t]*\n'	12,1087
'>[ \r\n]+<'	9,16
'[x-](\\d+)'	1269,1498
u'([\\\\"])'	782,1007
"[$^#\\\\']"	52,188
'[\\\\/\\*]'	1269,1498
'([aeiouy])y'	866,1184
'[\\r\\n\\t]'	305,1505
'[\\.\\-\\ ]'	1269,1498
'^0*(?=[01])'	1317,1501
'\n([ \t]*)$'	305,1505
'[\\.\\-\\_]'	927,1003
'[\\.\\-\\/]'	927,1003
'\\\\[ntrab]'	52,597
'\\n[\\t ]*$'	46,1050
'%([YmdHMS])'	640,662
'[EWN]\\d{3}'	1223,1420
'(.*)[-_](.*)'	1148,1469
'\\s*([-\\+])'	1248,1488
'([shv]db)\\s'	1317,1501
'([+-]\\d{4})$'	636,1125
'^([+-]) (.*)$'	241,1249
'([^,;]+[,;]?)'	1007,1301
'\\A[ \\t]*\\Z'	43,107
'^[\\n\\r]{0,1}'	1050,1350
'[$><;[{~`|&()]'	1015,1032
'[\\[\\]\\*\\?]'	1269,1498
'[\\.\\-\\/\\_]'	927,1003
'[&?]acl($|=|&)'	1223,1420
'([#$&%_\\${}])'	757,1087
'[\\n\\r]{0,1}$'	1050,1350
'[\\t\\b\\r\\f#]'	171,1381
'\\n\\r?[\\t ]*$'	1469,1621
'^[Mm]akefile.*$'	305,1505
'[Vv]irtio block'	1317,1501
'^\\${VISUAL[:}/]'	52,188
u'[<>:"\\?\\*\\|]'	813,927
'[Vv]irtio memory'	1317,1501
' -[HS]J \\d+;? ?'	109,182
'_\\[[Ee](\\d+)\\]'	1269,1498
'[Vv]irtio network'	1317,1501
',[ ]*([-]?\\d+|n)'	1317,1501
'([\\\'"])(.*?)\\1'	142,193
u'[/<>:"\\|\\?\\*]'	386,1181
'[ \\t]*\\.[ \\t]*'	55,908
'[&?]torrent($|=|&)'	1223,1420
'^(.*[/#])([^/#]+)$'	210,253
'[&?]logging($|=|&)'	1223,1420
'["\'](.+-div)[\'"]'	757,1087
'#[ \\t]*doctest:.*'	757,1087
'[&?]location($|=|&)'	1223,1420
'(.*) ([(][^()]*[)])'	251,1087
'^[aeiouy][^aeiouy]$'	866,1184
'[&?]versions($|=|&)'	1223,1420
'interface[ \t]+\\w+'	498,1495
'(.*?)(\\s*[\\]}].*)'	171,1381
'class[ \t]+\\w+.*?:'	498,1495
'.+[.](?<!log[.])zip'	241,1249
'([$\\\\%&@]+)?(\\w+)'	305,1505
'[filesystem|fs] type'	1317,1501
'CPU Affinity: +[-y]+'	1317,1501
'[&?]versioning($|=|&)'	1223,1420
'(?<!{)(\\\\)(?![{}]})'	147,181
'[\\.\\-_ ]?[Ee](\\d+)'	1269,1498
'\\n[\\t ]*\\n[\\t ]*$'	602,747
'[$][{]\\d+:([^}]+)[}]'	1025,1322
'def[ \t]+\\w+\\(.*?\\)'	498,1495
'[\x02\x1f\x16\x0f\x03]'	1269,1498
'^(.*?)([\\[\\*\\?].*)$'	440,542
'\\\\([.(){}[\\]"\\\\])'	440,542
'(vmlinu[xz]|kernel.img)'	171,1381
'[^%]+%[^.]+[.](compile)'	241,1249
'[/*?]|\\[[^]]*/[^]]*\\]'	737,1315
'test_(.+)\\.[json|yaml]'	811,821
'(?i)([\\. ])and([\\. ])'	1269,1498
'.*[/\\\\]bin[.]v2[/\\\\]'	241,1249
'(?s)^(.*)(\\n[ \\t]*)\\Z'	43,107
'href\\="((?:\\w|[.-])*)"'	1015,1032
'\\d+(\\.)?\\d*[eE]-?\\d+'	518,787
'rel=[\\\'"](\\w+)[\\\'"]'	747,971
'([idel])|(\\d+):|(-?\\d+)'	962,1557
'^[ \t]*[Xv!_][Xv!_ \t]*\n'	12,1087
'[&?]requestPayment($|=|&)'	1223,1420
'^([+-])(\\d{2}):?(\\d{2})$'	103,130
'Bill Name:\\s+([H|S]F\\d+)'	109,182
'(\\A[ \n]*\n)|(\n[ \n]*\\Z)'	757,1087
'["\'](.+)["\']\\s*:\\s*(.*)'	171,1381
"\\?\\?[=/\\'\\(\\)\\!<>\\-]"	256,689
'[^%]+%[^.]+[.](link|archive)'	241,1249
'[&?]versionId=([^&]+)($|=|&)'	1223,1420
'^[modprobe|insmod].*xen-vbd.*'	1317,1501
u'(?<!\\\\)/.*?[^\\\\]/[gims]*'	1025,1322
'range\\([ ]*([-]?\\d+|n).*\\)'	1317,1501
'^[\\"\\[`\\\']|[\\"\\]`\\\']$'	1415,1580
'(.*?)([\\\\\\{\\}\\[\\]])(.*)'	305,1505
'(<[^<>]+(?:href|src)=(["\'])/)'	1228,1231
'^[\\\'\\"][^\\\'\\"]+[\\\'\\"]$'	247,1007
'\\{\\%[ \\t]+(load\\b.*?)\\%\\}'	305,1505
'version *= *([\'"][^\'"]*[\'"])'	222,1486
'^(\\d+)\\s+([+-]\\d\\d:?\\d\\d)$'	103,130
'\\{\\%[ \\t]+(block\\b.*?)\\%\\}'	305,1505
'.*[^aeiouy][aeiouy][^aeiouywxY]$'	866,1184
'[^%]+%testing[.](capture-output)'	241,1249
'(?mi)^[ ]*\\:RequireModule:(.*)$'	757,1087
'(?:require|load)\\s+[\\\'"](.*?)$'	305,1505
'^(\\S.*?)??[=\\-\\(\\$\\\'\\"][#>]'	1087,1555
'[^aeiouy]*[aeiouy]+[^aeiouy](\\w*)'	866,1184
'(?P<id>.*)\\s*[:=]\\s*(?P<value>.*)'	1009,1442
'.*[/\\\\](.+)(\\:\\d+|\\(\\d+\\))\\:'	1007,1301
'(?i)^(\\d+(?:\\.\\d+)?)([kMGTPEZY]?)$'	386,1181
'\\smarkdown(=[\\\'"]?[^> ]*[\\\'"]?)?'	236,1395
'(([umsg]asser(t|ted))) *\\(( *)(\\d+)'	503,656
'(([umsgf]asser(t|ted))) *\\(( *)(\\d+)'	906,1404
'^(\\#{1,6})[ \\t]*(.+?)[ \\t]*\\#*\\n+'	55,200
'\\{\\%[ \\t]+\\b(block|if)\\b.*?\\%\\}'	305,1505
'[\\?#&](?P<name>[^&=]+)=(?P<value>[^&=]+)'	1263,1580
'^([^<]*)<([^>]*)>\\s+(\\d+\\s+[+-]\\d{4})$'	103,130
'^(..[^\\(:]+)?[\\(:](\\d+)[\\):]:?\\s*(.*)'	602,1054
'(\\*\\*|__) (?=\\S) (.+?[*_]*) (?<=\\S) \\1'	55,200
'importScripts\\([\\\'"]([^\\\'"]+)[\\\'"]\\)'	896,1300
'^(\\[.*?[Pp][Aa][Tt][Cc][Hh].*?\\])?\\s*(.*)$'	103,130
'\\s*(<=?|>=?|===?|!=|~=)\\s*((\\w|[-.*_!+])+)'	1263,1580
'flashvars: [\\\'"](?:.*&)?file=(http[^\\\'"&]*)'	386,1181
'[^%]+%testing[.](expect-failure|expect-success)'	241,1249
'^[ \\t]*Traceback \\(most recent call last\\):.*'	757,1087
'\\S* *\\d*-\\d*-\\d* \\d*:\\d*:\\d* [+-]\\d* \\w*'	1317,1501
'(?<!\\\\)([aAbBcdDfFgGhHiIjlLmMnNOPrsStTUuwWyYzZ])'	1004,1495
'(?P<op>([<>=!~]=)|[<>])\\s*(?P<vn>(\\w|[.-])+\\*?)'	1263,1580
'([+-]\\(.*?\\)|\\(.*?\\)[\\*\\+]|\\(.*?\\))(?:\\s|$)'	305,1505
' (SENATOR|REPRESENTATIVE)\\([Ss]\\) ([^,]+(,[^,]+){0,})'	109,182
'(^[ \\t]*In \\[\\d+\\]: |^[ \\t]*\\ \\ \\ \\.\\.\\.+: )'	422,1517
'(?P<code>[ADEFIJ])(?P<width>\\d+)(?:\\.(?P<prec>\\d+))?'	332,689
'((?:[^{}]?[<>=^])?)([-+ ]?)(#?)(\\d*)(,?)((?:\\.\\d+)?)(.?)$'	568,1144
'(?P<key>.*)\\s*=\\s*u?\\[?[\\\'\\"](?P<value>.*)[\\\'\\"]\\]?'	295,1496
'/\\* \\[([^\\]]*.*?)] \\*/[ \\t](.*[* ]+)(\\w+)(\\[ *])?[\\),]'	602,1054
'^(.+?)[ \\._\\-]\\[[Ss](\\d+)\\]((?:_\\[[Ee]\\d+\\])+)[^\\/]*$'	1269,1498
'%(?:%|(\\(\\w+\\))?([#0 +-]?(?:\\d+|\\*)?(?:\\.\\d+)?[hlL]?\\w))'	1223,1420
'(([wum]asser(t|ted))) *\\(( *)(\\d+) *,\\s*("\\S[^"]+\\S")\\s*,?.*'	1459,1531
'(\\w{3}, \\d{1,2} \\w{3} \\d{4} \\d\\d:\\d\\d:\\d\\d) [\\+\\-]\\d{4}'	1269,1498
'^([-]+BEGIN CERTIFICATE[-]+[\\r]*\\n.*[\\r]*^[-]+END CERTIFICATE[-]+)$'	1087,1580
'(?<![\\\'\\"])require\\s*\\(\\s*[\\\'\\"]([^\\\'\\"]+?)[\\\'\\"]\\s*\\)'	247,1007
'[ ]*(?P<arg>.*?=(?:(?:[^"\']*?)|(?:"[^"]*")|(?:\'[^\']*\')))[ ]*[,\r\n]'	1232,1233
'\\b((http|ftp)://[^ \\t\\n\\r\\f\\v<\'"]+|RFC[- ]?(\\d+)|PEP[- ]?(\\d+))'	305,1505
'(?P<before>.*?)[\\(]host (?P<host>\\S+) (?P<action>[^:]+): (?P<message>.*)[\\)]'	440,542
'[\\.\\-\\/\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\+\\-"\'\\,\\;\\:\\[\\]\\{\\}\\<\\>\\=\\_]'	927,1003
'(require|define)\\s*\\(\\s*([\\\'\\"][^\\\'\\"]+[\\\'\\"]\\s*,)?\\s*\\[([^\\]]+)\\]'	247,1007
'<meta[^>]*content\\s*=\\s*[\'"]?text/html;\\s*charset\\s*=\\s*([^ \'">]+)\\s*[\'"]?[^>]*>'	1228,1231
"((?P<prefix>[$@%\\\\*&]+)\\s*)?(?P<scope>(::)?\\b((?!\\d)\\w*?(::|'))*)(?P<name>(?!\\d)\\w+)$"	305,1505
'(\\s*)((BOOST_STATIC_CONSTANT\\(\\s*\\w+,\\s*|enum\\s*\\w*\\s*{\\s*)value\\s*=)(.*?)([}|\\)];)$'	241,1249
'(abstract[ \t]+)?((public|private|protected)[ \t]+)?(static[ \t]+)?function[ \t]+?\\w+\\(.*?\\)'	498,1495
'^((?:\\(\\S+\\))?(?:|sh\\S*?|\\w+\\S+[@:]\\S+(?:\\s+\\S+)?|\\[\\S+[@:][^\\n]+\\].+)[$#%])(.*\\n?)'	1087,1555
'((final|abstract)[ \t]+)?((public|private|protected)[ \t]+)?(static[ \t]+)?class[ \t]+\\w+((implements|extends)\\w+)?'	498,1495
'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})[T ](?P<hr>\\d{2}):(?P<min>\\d{2}):(?P<sec>\\d{2})(?P<fractional_sec>\\.\\d+)?'	159,1155
'\n    ^\n    [ \\t]*\n    (?: if\n    |   for\n    |   while\n    |   else\n    |   def\n    |   return\n    |   assert\n    |   break\n    |   class\n    |   continue\n    |   elif\n    |   try\n    |   except\n    |   raise\n    |   import\n    )\n    \\b\n'	602,1054
'<\\?xml\n            (   # strict ordering is reqd but we\'ll be liberal here\n                \\s+version=[\'"](?P<ver>.*?)[\'"]\n            |   \\s+encoding=[\'"](?P<enc>.*?)[\'"]\n            )+\n            .*? # other possible junk\n            \\s*\\?>\n        '	305,1505
'\n    (\\n)?                            # leading line = $1\n    (^[ \\t]*)                        # leading whitespace = $2\n    ([*+-]|\\d+[.]) [ \\t]+            # list marker = $3\n    ((?:.+?)                         # list item text = $4\n    (\\n{1,2}))\n    (?= \\n* (\\Z | \\2 ([*+-]|\\d+[.]) [ \\t]+))\n    '	55,200
'    # A numeric string consists of:\n    (?P<sign>[-+])?          # an optional sign, followed by\n    (?=\\d|\\.\\d)              # a number with at least one digit\n    (?P<int>\\d*)             # having a (possibly empty) integer part\n    (?:\\.(?P<frac>\\d*))?     # followed by an optional fractional part\n    (?:E(?P<exp>[-+]?\\d+))?  # and an optional exponent\n    \\Z\n'	1087,1580
' (                       # wrap whole match in $1\n                  !\\[\n                    (.*?)               # alt text = $2\n                  \\]\n\n                  [ ]?                  # one optional space\n                  (?:\\n[ ]*)?           # one optional newline followed by spaces\n\n                  \\[\n                    (.*?)               # id = $3\n                  \\]\n\n                )\n    '	55,200
' (                 # wrap whole match in $1\n                  \\[\n                    (.*?)        # link text = $2 \n                    # [for bracket nesting, see below]\n                  \\]\n\n                  [ ]?           # one optional space\n                  (?:\\n[ ]*)?    # one optional newline followed by spaces\n\n                  \\[\n                    (.*?)        # id = $3\n                  \\]\n                )\n    '	55,200
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*   # PS2 lines\n          \\n?)\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .*$\\n?       # But any other line\n                  )*)\n        '	757,1087
' (                   # wrap whole match in $1\n                  \\[\n                    (.*?)          # link text = $2\n                  \\]\n                  \\(               # literal paren\n                        [ \\t]*\n                        <?(.+?)>?  # href = $3\n                        [ \\t]*\n                        (          # $4\n                          ([\\\'\\"]) # quote char = $5\n                          (.*?)    # Title = $6\n                          \\5       # matching quote\n                        )?         # title is optional\n                  \\)\n                )\n    '	55,200
' (                        # wrap whole match in $1\n                  !\\[\n                    (.*?)               # alt text = $2\n                  \\]\n                  \\(                    # literal paren\n                        [ \\t]*\n                        <?(\\S+?)>?      # src url = $3\n                        [ \\t]*\n                        (               # $4\n                        ([\\\'\\"])        # quote char = $5\n                          (.*?)         # title = $6\n                          \\5            # matching quote\n                          [ \\t]*\n                        )?              # title is optional\n                  \\)\n                )\n    '	55,200
'\n    ((?P<name>\\w+)\\s*=\\s*)?\n    (?P<value>\n        True|False|\n        \\d+.\\d+|\n        \\d+.|\n        \\d+|\n        \\w+|\n        [urUR]?(?P<stringval>"[^"]*?"|\'[^\']*\')\n    )\\s*,\n'	992,1104,1257,1386,1415,1469,1536,1580
'\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a "q" or a "b", case insensitive\n  \\?                    # literal ?\n  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string\n  \\?=                   # literal ?=\n  '	43,412,759,852,961,1221,1511,1580
u'(?x)\n        (?P<expression>.*)              # Everything up to the line separator\n        (?P<separator>[,;+\\-/*%^&|=\\\\]) # The line separator\n        \\s*                             # Optional whitespace after\n        $                               # End of expression\n    '	304,1025,1322
'        # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \\s*\n    \\Z\n'	1054,1087,1580
'["]'	445
'[#]'	74
u'[;]'	733
'[{}]'	1248
'[~$]'	360
'[x+]'	1580
'[\n]'	190
'[Yy]'	1135
'[SW]'	893
'[<&]'	1076
'[=,]'	585
'[:@]'	1068
'[:/]'	1462
'[/ ]'	1247
'[.:]'	1495
'[-:]'	679
'[- ]'	860
'[, ]'	560
'[ ?]'	1232
'[ T]'	245
'[|&]$'	1300
'[abc]'	918
'[\t ]'	1561
'[\n,]'	360
'[\\)]'	74
'[\\(]'	74
'[\'"]'	1107
u'[xy]'	813
'[?/]+'	220
'[01]+'	1501
'[._-]'	1589
'[.;] '	1541
'[.:-]'	1135
'[,\n]'	1190
'[-./]'	1501
'[*?!]'	687
'[*,]+'	1248
'[()=]'	1580
'[().]'	283
'[&"<]'	1638
'^[yn]'	1426
'["\']'	1580
'^[?@]'	1248
'^[@+]'	340
'^[87]'	1122
'^[$_]'	1322
'^[ ]*'	1050
'[ \n]'	1302
"(['])"	780
'([|&])'	1300
'-[th]l'	1248
'[<>{}]'	1248
'[<>:/]'	251
'[<=>!]'	485
'[\t ]+'	1540
'[,\\|]'	944
'[abc]+'	918
'^[ab]/'	1426
'[\\.:]'	740
'[\\+-]'	1051
'[sxz]$'	1247
'([<>])'	1559
'[,;:].'	200
'[;,/-]'	1001
'([-,])'	1258
'[,.]*$'	220
'([)]+)'	1267
'([(]+)'	1267
'^[,.]*'	220
'  [ ]*'	1495
'[\'"]+'	1226
'[ ]+\n'	1247
'^-[RL]'	294
'99[.]99'	313
'^[a|b]/'	1426
'[\r\n]*'	1054
'^[\t ]*'	805
'[$][^$]'	592
'[&<\'"]'	190
'.*[\\/]'	812
'-[>-]* '	1594
'^[fF]+$'	1250
'([<>&])'	1580
'([.*]+)'	27
'^[MT0]+'	1512
'[\\n,]+'	232
' *[;#!]'	735
'^[*]...'	313
u',:[ _]'	733
'([/_%])'	1258
'[\\-: ]'	1025
'^[1|2]$'	1353
'/[.]svn'	805
'[\\"\']'	826
'[Ee]rror'	31
'[\\?%]>$'	826
u'[<{\\[]'	733
'[-./:# ]'	1076
'[\\>:]+$'	126
'(/)?[*]$'	1381
'[\\._ ]+'	1557
'[ \\t]*#'	53
'^["\']?/'	826
'[@:]type'	43
'([-:. ])'	1469
'([()| ])'	1248
'[\n\\ ]+'	1020
'[\\(\\)]'	232
'l[eo]af$'	1247
'[\\]\\}]'	813
'[pP]ylot'	903
u'[&#%?!]'	733
'^[hsv]+d'	548
u'[eE\\.]'	689
'[$]{.+?}'	119
'^[\\< ]+'	126
'[:/\\\\]'	260
'[\\\\{}]'	1580
'[\\t\\n]'	826
"('[{}]')"	498
'^[ \\t]+'	1580
'\\bc[cs]'	1248
u'[>}\\]]'	733
'[\\[\\{]'	813
'\\bab[nx]'	1248
'[\\n\\r]+'	1555
'(?=[\\"])'	31
'([1IiAa])'	729
u'[\r\n ]+'	733
"([,']\\s)"	1248
'^[tf]lf2.'	734
'[][\\()"]'	43
'([&|() ])'	1143
u'[\t\n ]+'	733
'[uU][\'"]'	1594
'([\\x7F])'	455
'[sS]ignal'	232
'i[3456]86'	290
'([\\x0D])'	455
'p[1,2,3]$'	548
'[actg]{3}'	1331
'f[lie]=.+'	356
'([!<>=]+)'	1007
'[\\/\\\\]'	1240
'^\\s*[#;]'	599
'^[.]{1}.*'	84
'[()\\134]'	1386
'[\n ]{2,}'	126
'[\t\r\n]+'	960
'([*]|[:])'	356
u'[;:][ _]'	733
'[ \t]+|\n'	1523
'[\\r\\n]*$'	1302
'[_-]rc\\d+'	560
'[\\?\\&=:]'	990
'([$`\\\\])'	31
'[ \t\n\r]+'	339
'[ \\t]+\\n'	789
'^[ex]\\d+$'	1248
'[123 ]*H.*'	1302
'^([@+])?.*'	340
'([\\t\\n])'	1248
'^-[LRuYz]$'	294
'<([~\\^])>'	1248
'[\\n\\r]+?'	1513
'[ \r\n\t]+'	1371
'[ \t\r]+\n'	1247
'["\\\'{},]'	1470
'([\\{\\}])'	1076
'^[_]+[ -]+'	1566
'[@:]number'	43
'[MPK]+\\d+'	1412
'[\n\r\t ]+'	1076
'[\\\\][\n]'	557
u'[ab]\\d+$'	1007
'l([eo])af$'	1247
'([\\\\{}])'	1580
'^([.]*).*$'	1469
'^[\t\r\n]+'	960
'[\t\r\n]+$'	960
'[,|;]?\\s?'	916
u'[\\-*:=@]'	943
'[ \\*]*(.+)'	413
'<[Bb][Rr]/>'	110
'([+-]?\\d+)'	771
'([\\[\\]]+)'	1469
'([{}_#%&$])'	1635
' |,|"|=|[|]'	1618
'[()[\\]:&"]'	1001
'[nN]ew (.*)'	1594
"[uU]('.*?')"	1087
'--[ \t\n]*>'	413
':"(["|\\{])'	1205
'^[@]+|[@]+$'	1580
'---[ \t]*\n'	910
'[-+]\\s*\\('	292
'([\'"#%*?])'	1618
u'[/+\\\\:=]'	733
'\\\\[\\\\]?'	313
'([`$\\\\"])'	31
'[MAD][\t ]+'	1540
'[\\{\\}<>]+'	1248
'take\\s*[(]'	356
'[(](.*?)[)]'	1461
'([/.~\\\\])'	1258
'["\\(\\) ,-]'	126
'[\\(\\[\\{<]'	1248
'[   \\r\\n]+'	1247
'[/\\\\?\\*:]'	457
':(?![\\\\/])'	1007
'\\([01,]+\\)'	276
'^[\\*j.] .*$'	153
'[Yy][Ee][Ss]'	1135
'[-|\\+]\\d+$'	727
'[*\\/:."\' ]'	1249
'(.*?)[,(:].*'	1321
'\\b[\\-_]\\b'	255
'[ _.\\[\\]]+'	1557
'^([ \\t]*#*)'	1580
'[&<>"\']|]]>'	1350
'[\\)\\]\\}>]'	1248
'[@:]template'	43
'(\\D[123])_D'	975
'([$]{[^}]*})'	313
'[aeouiAEOUI]'	153
'\\\\[natbv"]?'	602
'^[ \\t\\n\\r]'	360
u'{[{%].*[}%]}'	1557
'[/ \\t\\r\\n]'	944
'\\n[ \\t]*\\n'	1248
'[,]?([^,=]+)='	1068
'\\\\(?![nrt])'	602
'(?=^[.]{1}.*)'	84
'([\\\\"\\\'])'	1248
'--[ \t\r\n]*>'	1076
'[\\t\\r\\n ]+'	539
u'[ _]?\\(!\\)'	733
u'[?!]([."]|$)'	733
'^[_@]+|[_@]+$'	1580
u'[-,^]([.]|$)'	733
'[ \\n\\r\\t]+'	1050
'^(\\s*>[ >]*)'	747
'[\\\\\\"\\$`]'	679
'[-][-]link[-]'	356
'^[ \\n\\t\\r]'	1618
'extdemo[.]pyd'	313
'[\\()\\[\\]"]'	340
'^([#*]+)\\s.*'	1267
'[ \\t\\n\\r]$'	360
'^(.+)[&](.+)$'	560
'[ \\n\\t\\r]$'	1618
'[acgt][acgt]+'	1331
'[d|D](ebu|b)g'	1199
'(.*?)([?*]|$)'	1184
'^(.+)[|](.+)$'	560
'(\\d+[dwhms])'	873
'^([><])(\\d+)'	1302
"[/!:?\\-,\\']"	1232
'\\$([@\\^\\$])'	1547
'/[.]svn|.*26.*'	805
'[\\\\/:*?"<>|]'	1569
'ou=(\\S+)[,\n]'	693
'^[ ]{0,3}[^ :]'	236
'.*[Cc]aptcha.*'	55
'([\\+\\-\\^]+)'	1087
'^[+]{0,1}\\d*$'	1607
'/ (?=[\\*&,])/'	1399
'\\${(\\d+)[:}]'	597
'\\sinet[6]?\\s'	548
'([>}])(?=[<{])'	1248
'^([cku]?)x(.*)'	1278
'^<[\\?%](php)?'	826
'^[,.?!"()\\\']'	776
'[*]|--|[^+*-]+'	1248
'^(.*)([ \t]+)$'	1216
u'[*?]|\\[.+\\]'	737
'[@:]ok_message'	43
'[RL]\\{(.+)\\}'	498
'^(\\d+)([dwm])$'	317
'^["]([^"]+)["]$'	502
u'[\t ]*\n[\t ]*'	1438
'<[Bb][Rr][^>]*>'	110
'([\\-]\\s+)(.+)'	1315
'(?P<ws>[ \\t]*)'	53
'[\\\\\\r\\n\\"]'	908
'[\\[\\]\\(\\);]'	64
'[ ]*%\\(.*?\\)s'	356
'\\w+([.]\\w+)*$'	1214
'\\\\([\\\\{}%])'	1247
'[:*?"<>\\|\\n]+'	309
u'[\\._\\(\\) ]+'	1557
'^[|+` -]+policy'	1051
'[-][-](verbose)'	356
'^([acguACGU]+)$'	1372
'[\\\\*?:/\\[\\]]'	729
u'\\s-[wdhm]?\\d+'	833
'\\w+|[\\.\\!\\?]'	1248
'^([\'"])(.*)\\1$'	1025
'([\r\n.]*)\r\n# '	506
'([IOB])-?(\\S+)?'	1488
'(.+)[-_]r?(\\d+)'	318
'^(.*)([\\?#].*)$'	988
'[*{}?+]|\\[.+\\]'	737
'[][\\()<>@,:;".]'	43
'.*[Ll][Ss]-120.*'	1051
'[Oo]pera [Mm]ini'	78
'^\\s* ([#\\*-]) '	738
'\\*[LR][CRS]B\\*'	1248
'^([Mm]a?c)(\\w+)'	1561
'\x1b\\[[0]{0,1}m'	498
'[\\\\/\\?"]|^\\.'	1003
'([\\\\\\"\\\' ])'	534
'^(.*)(\\.py[oc])$'	1226
'[-][-]compiler[=]'	356
'[ \t:;,+/\\"\'`]+'	1540
'[ \\t]+sss[ \\t]*'	789
'[QA]?[:;.]?\\d\\d'	1190
'(\\w:[/\\\\])(.*)'	599
'([ \\"\'\\\\\\$])'	407
'^(\\s+)[-=]+\\s*$'	356
'[@:]error_message'	43
'[\\t\\n\\r\\v\\f]'	560
'[+-](\\d+\\.\\d+)'	1501
'/?\\w+/\\w+[.]xsd'	436
'^[ \\t]*def \\w+$'	1555
'[uU]?[rR]?([\'"])'	1248
'([[ ~^:?*]|\\.\\.)'	502
'max[(](.+),(.+)[)]'	356
'^:.*[MAD]\\s*(.+)$'	122
'int\\s*[(][^)]*[)]'	356
'(\\dQ)|(Q[:.]?\\d)'	1190
'flake8[:=]\\s*noqa'	1505
'min[(](.+),(.+)[)]'	356
'[ ]+(?P<t>[,;\\.])'	1247
'distro[\\\\/]+(.+)'	119
'[ \r\t]*\n[ \r\t]*'	757
'[\\/]*\\.\\.[\\/]*'	908
'([\r]?\n)+[ \t]{1}'	200
'[^(]+[(]([^)]+)[)]'	602
'[Ff]ile(\\d+)=(.+)'	53
'[.:, !?+=\\(\\)/]+'	1340
'(E?%0?E(?![._]?N))'	1269
'^:.*[MAD]\\s+(.+)$'	122
'\\(([IVXLCDM]+)\\)'	1469
'\\n(?:[ \\t]*\\n)+'	666
'(\\w+)([.#])(\\w+)'	305
'^([^ \\t]+)[ \\t]*'	813
u'[_.,\\[\\]\\(\\):]'	1557
'(?<=\\n)[ ]+(?!\\s)'	1248
'[Tt]itle(\\d+)=(.+)'	53
'[ \\t]*(#[^\\n]*)?$'	908
'([\'"][^\'"]*[\'"])'	1054
'bool\\s*[(][^)]*[)]'	356
'(\\S+)([ \t]*?)(.*)'	338
'([\\\'"])[^\\1]*\\1'	1469
'^\\s+[END|START].*$'	560
'[- \t:;,!+/\\"\'`]+'	1540
'^[ \\t]*class \\w+$'	1555
'-?(\\d*)([.]?\\d*)?'	1248
'[ \t]+(?P<a>\\S.+?){'	1247
'["\\*\\/:<>\\?\\\\|]'	10
'^\\(([IVXLCDM]+)\\)$'	1469
'^$|^-$|[/ \\t\\r\\n]'	944
'(?<![\\n\\*])\\*{2,}'	138
' \\([=<>]* [^ )]*\\)'	1143
'([.]flat(\\s*?[[=]))'	356
'[INFO|FILTER|FORMAT]'	1412
'[\\\\/\\:*?"<>|\x00]'	1007
'^([1\\.\x00\\-\\+]+)'	754
'/\\*.*?\\*/\\s*|[()]'	292
'[?\\&|!{}+~^()":*-]+'	200
'^(\\s*) [#\\*-] (.*)'	738
'float\\s*[(][^)]*[)]'	356
'[][ (){}?:<>#!|"\';]'	975
'([+-]?\\d*\\.?\\d+)$'	456
'-[ \\t]*\\n[ \\t\\r]+'	1618
'src=([\\\'"])(.+?)\\1'	1144
'[\\r\\n^<>|;&"\\\'%$]'	566
'[+\\-]{0,1}\\b\\d+\\b'	1108
'[ \\t]*\\n([^\\r\\n])'	1025
'W (\\d{1,3}) ([10PX])'	318
'(\\d[Aa])|(A[:.]?\\d)'	1190
'(.*(\\s+|[*]))(\\w+)$'	356
'\\s*([^,;]+?)\\s*[,;]'	1522
'[/:()<>|?*\\ ]|(\\\\)'	1613
'^[-\\\\.(),!&^|>=<]*$'	1248
'([bB]ug#?\\D#?(\\d+))'	1644
'[Ww]atchpoint (\\d+):'	1621
u'[_.,\\[\\]\\(\\): ]+'	1557
'([+-])?(\\d+[dwhms])+'	873
u'.*([-.*?]|\\[.+\\]).'	737
'/[*]\\s*f2py\\s.*[*]/'	356
'[Ll]ength(\\d+)=(\\d+)'	53
'[name|class]="([^"]*)"'	1249
'zc.buildout-\\S+[.]egg'	313
'<%[\\=\\-\\#]?(?!.*%>)'	1025
'(?i)([+-]\\d+):00 from'	539
'^[ ]{0,3}[*+-][ ]+(.*)'	236
'[(]([^)]*)[)]\\*(\\d+)'	356
'^([^=]+)[ ]*=[ ]*(.+)$'	502
'[\\r\\n]+\\s*[\\r\\n]+'	43
'zc.buildout[.]egg-link'	313
'[\\r\\n\\t ]+[\\r\\n]+'	682
'#include *["<](.*)[">]'	119
'(?s)<!--(.*?)-->[\\n]?'	1248
'([\\[\\]\\(\\)\\{\\}])'	740
'unicode\\s*[(][^)]*[)]'	356
'complex\\s*[(][^)]*[)]'	356
'[\\x00:\\*\\?\\"<>\\|]'	1469
'[\\t\\n\\r\\f\\v;=%&,]'	276
'(?m)(?:^[ \\t]*\\n){1,}'	1258
'\\(\\s*([*]|[:])\\s*\\)'	356
'(?m)^Failed [Ee]xample:'	1470
'(\\d[.]\\d)([.].*\\d)?$'	313
'^translator[-_]credits$'	556
'[ \\t]*// @(\\w+): (.*)'	1534
'var-bind=[\'"](.*)["\']'	596
'["\'`\\(\\) /.,\\-\xa0]'	126
'class |def |u?r?["\\\']'	1199
'^[ MADRCU?!]{1,2}\\s+.*'	1025
'^[ ]{0,3}:[ ]{1,3}(.*)$'	1395
'(?:["\'])(.*)(?:["\'])$'	1258
'\\\\(?P<char>[/@:\\\\])'	1235
'[ \t]*File.*line (\\d+)'	53
'[dSNwrho]{1,3} =.{7,8}?'	1302
'mozilla\\.[com|net|org]'	1644
'\\A<[^>]*?href=["\']\\Z'	245
'-py\\d[.]\\d(-\\S+)?.egg'	313
'[MAD][\t ]+ChangeLog.txt'	1540
'\\s{2,}|[\t\n\r\x0c\x0b]'	381
'^[ ]{0,3}\\d+\\.[ ]+(.*)'	236
'\\[!([bcgmryBCGMRY])?\\]'	736
u'[ \\(\\)\\-_\\[\\]\\.]+'	1557
'^\\d+\\.\\d+([ab]\\d+)?$'	1248
'^E1100[01] duplicate key'	985
'http[s]*:.*flickr.com/.*'	1285
'(^.|\\b(?:[iv]+|dci)\\b)'	771
'^BUG[ \\t]*=[ \\t]*(.+)$'	534
'(?:[~#]|\\.py[co]|\\.o)$'	356
'.*[<]KILLLINE[>].*(\\n|$)'	356
u'==\\s*Delta[kg]ere\\s*=='	1100
'^.*[/\\\\]koans[/\\\\].*$'	1633
'legislator/[SH]\\d+\\.htm'	182
'([abc|rc])[\\-\\.](\\d+)$'	1469
'[\\.\\?!\\t\\n\\r\\f\\v]+'	255
'[ \\t]*(#[^\\n]*)?\\r?\\n'	908
'(\\x0d\\x0a|[\\x0d\\x0a])$'	1386
'(\\S+[.]savespace[(].*[)])'	356
'href="?/imgres\\?(.*?)[ >]'	183
'\\s*[:_\t]+\\s*|\\s{2,}|\n'	1190
'([+-])(\\d\\d):?(\\d\\d?)?'	96
'[+-]?\\d*\\.\\d*|[+-]?\\d+'	374
'.*\\([+]{0,1}\\d{3,15}\\)$'	1607
'[,;:\\(\\)\\[\\]\\{\\}<>]+'	255
'^Signed-[Oo]ff-[Bb]y: (.+)$'	502
'(http://)?localhost([:/]|$)'	350
'["\\*<>\\|]|^\\.|\\.$|\\s+$'	1003
'[-d]  setuptools-\\S+[.]egg'	313
'[-+]\\s*\\(.*?\\)\\s*(\\w+)'	292
'([\\\\/])([.,]?)([.,]?)(.*)'	1248
'(.*[*?[\\\\]|ignorecase\\:)'	679
'__title__.*?["\'](.*?)["\']'	431
'(.+)[-_](\\d+)_(\\d+)_(\\d+)'	318
'[ \\f\\t]*(?:\\r\\n|\\r|\\n)'	53
'^[ \t]*(?i)script(?i)[ \t]*$'	1591
'[QA]?[:;.]?\\d\\d[:;.]\\d\\d'	1190
'[#\n]*#\\s+Copyright\\s+\\d*'	1384
'.*[ :\\+\\-,\\.\\*\\?\\[\\]]'	975
'^([ >]*)(import|from) +nifti'	975
'[-d]  (setuptools|distribute)'	313
'^([+\\-])?\\$([^\\$\\{\\}]+)$'	557
'%\\(line *([\\+-]) *(\\d+)\\)'	1243
u'\\w{5,}|\\w{2,}(?:[:-]\\w+)+'	782
'[\\x00\\/\\\\:\\*\\?\\"<>\\|]'	1469
'(\\n|\\r\\n|\\r|[ \\t]+|\\S+)'	43
'.*[\\*,\\[,\\],\\{,\\},\\?].*'	290
'(.+)[-_](\\d+)\\.(\\d+)(\\w?)'	318
'^([^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)'	1491
'^[S7]\\s*[T8]\\s*[O6]\\s*[P7]$'	838
'rootpw[ ]+--iscrypted[ ]+.*\\n'	1051
'[-+*!|&^~/%\\=<>\\[\\]{}(),.:]'	1247
'([:][ ]*)([/])(.*)([/][ismx]*)'	1354
u'^VERSION\\s*=\\s*[\\\'"]{1,3}'	689
'AC_INIT[(][^,]*,\\s+([^)]*)[)]'	1520
'/[*]+(?:[^*]+|[*]+[^/*])*[*]+/'	1023
'http[s]*:.*youtube.com/watch.*'	1285
'dir[\\n\\r]+(?P<revision>\\d+)'	356
'^.+? (.*) (\\d+) ([+-]\\d+).*$'	599
'\\s*?- Method:\\s*(\\S*)[(].*$'	1007
'version[ \\t]+([^ \\t\\r\\n]+)'	1252
'(?P<num>\\d+)(?P<unit>[wdhms])'	1571
'[-+*!&|^~/%\\=<>\\[\\]{}(),.:]'	1247
'^\\s*class\\s+(\\w+)\\s*[:\\(]'	1248
'.*(\\.ipy|\\.ipynb|\\.py[w]?)$'	1580
'r\\d+\\s[|]\\s(.*)\\s[|]\\s200'	356
'^([><]*\\d+)\\.\\.([><]*\\d+)$'	1302
'-?\\d+(?:\\.\\d+)?(?:[eE]\\d+)?'	1555
'([!=]=\\s*None)|(None\\s*[!=]=)'	1054
'([.#])((?:[^ \\t\\.#]|\\.\\.)+)'	338
'cdef\\s*class\\s*(\\w+)\\s*[(:]'	407
'[\\-]{5}END CERTIFICATE[\\-]{5}'	1315
'\\s*(?P<a>[\\+\\-\\*/\\=]+)\\s*'	1247
'revision[ \\t]+([^ \\t\\r\\n]+)'	1252
'(src|href)\\=([\\\'"]?)/?files/'	1580
'value=[\\\'"]([^\\\'"]+)[\\\'"]'	966
'\\s*(([\\\'"])\\2)\\s*([},=]|$)'	727
'(.+_id|id)([mp]?\\d+)((?:-bb)?)'	241
'(?m)^[\\t ]*/\\* *\\.\\. .*?\\n'	356
'^(?P<op>=|[<>!]=?)?(?P<ver>.*)$'	1025
'^[ \t]*(?i)end script(?i)[ \t]*$'	1591
'([\\+\\?\\(\\)\\[\\]\\*\\.\\\\])'	1384
'.*Video: .+, (\\d+)x(\\d+)[, ].*'	53
'^Synset\\([\'"]([^\\)]*)[\'"]\\)'	1230
'^[ ]{4,7}((\\d+\\.)|[*+-])[ ]+.*'	236
'^\\s*?([*]|/\\*\\*)(?P<line>.*?)'	706
'zc.buildout(-\\S+)?[.]egg(-link)?'	313
'<[wc](?: [^>]*){0,1}>(.*?)</[wc]>'	1248
'(\\d{1,2}) (\\d{1,2})[ ]?(\\d{4})'	1113
'(.+)[.](proto|impl|init|cleanup)$'	1621
'\\[\\[[Ii]mage:([^.]*)(.*?)\\]\\]'	1454
'([+*/\\%^\\&|-]|<<|>>|\\*\\*|//)='	1621
'[ \\t]*#indent[ \\t]*(?P<args>.*)'	53
'^\\s*#\\s*include\\s*["<]([^>"]+)'	557
'([^!]+)(?:!([^+-]+)?([+-]\\S+)?)?'	8
"\\\\(['`:*~\\\\[\\]{}@\\$+\\-.#])"	1247
'^http://gatherer[.]wizards[.]com/'	771
'<[^>]* alt=[\'"]([^\'"]*)[\'"].*?>'	220
'[IV]+$|\\bJr\\b\\.$|\\b(Sr)\\b\\.$'	182
'url\\([\'"]?(.*?)[\'"]?[\\)\\?\\#]'	1579
'VERSION\\s*=\\s["\\\'](.*?)["\\\']'	252
'^(?P<bytes>\\d+)(?P<unit>[gmkb]?)$'	826
'(\\S*)[-](\\d+\\.\\d+\\.*\\d*)\\S*'	975
'xlfcmp:(?P<version>\\d+([.]\\d+)+)'	356
'^[ ]{0,3}((\\d+\\.)|[*+-])[ ]+(.*)'	236
'(.*)[\r\n](.*)[\r\n](.*)[\r\n](.*)'	1488
'\\[(\\d+):(\\d\\d)([\\.:]\\d+|)\\]'	1431
'^[./]*resolve[Uu]id/([^/]*)/?(.*)$'	988
'[ ]{0,3}\\[\\^([^\\]]*)\\]:\\s*(.*)'	1395
'<([wc](?: [^>]*){0,1}>)(.*?)</[wc]>'	1248
'([\\|\\{\\}\\\\\\.\\+\\[\\]\\(\\)])'	43
'(\\S+\\s*)[.]shape\\s*=[^=]\\s*(.+)'	356
'(\\S+)\\s*[.]\\s*type\\s*[(]\\s*[)]'	356
'\\A\\s*----+[ ]*\n(.*)\n----+[ ]*\n'	1470
'<[^>]* term=[\'"]([^\'"]*)[\'"].*?>'	220
'([\\+-].\\d+.\\d+,[\\+-].\\d+.\\d+)'	1285
'(\\S+)\\s*[.]\\s*info\\s*[(]\\s*[)]'	356
'\\>(?P<a>\\s+)(?P<b>[\\.\\,\\:\\;])'	1247
'(\\S+)\\s+(\\S+)\\s+([IOB])-?(\\S+)?'	1248
'[-d]  (setuptools|distribute)-[^-]+-'	313
u'(?<!\\\\)(["\\\'])(.*?)(?<!\\\\)\\1'	304
'GL(_ES)?_VERSION(_ES_C[ML])?_\\d_\\d'	533
'(?P<text>(\\w|[-])*[*?](\\w|[-*?])*)'	951
"(\\\\*)(['`:*~\\\\[\\]{}@\\$+\\-.#])"	1247
'(^build|[^/]+\\.egg-info|.*.py[co]$)'	884
'<[^>]* title=[\'"]([^\'"]*)[\'"].*?>'	220
'(\\*\\*)(?=\\S)([^\\r]*?\\S[*_]*)\\1'	888
'^((?:\\[?\\S+@[^$#%]+)[$#%])(.*\\n?)'	1555
'(\\S+)\\s+(\\S+)\\s+([BIO])-?(\\S+)?'	1248
'^(\\d+)\\W(\\w+)\\W(\\w+)[ \t]+(.*)$'	233
'<[^>]* label=[\'"]([^\'"]*)[\'"].*?>'	220
'\\s*crt\\s*[=]\\s*(?P<path>.*)/crt1.o'	356
'\\s*[,/&.]\\s*|\\s+and\\s+|\\s{2,}|\n'	1190
'distribute( version)? \\d+[.]\\d+\\S*'	313
'(?P<pbs>\\\\*)(?P<escChar>\\\\[iIcC])'	866
'(.+)[-_](\\d+)\\.(\\d+)\\.(\\d+)(\\w?)'	318
'[ \t]+(modified|deleted|new file): +.+'	1540
'(?:Default-Start|chkconfig):\\s*[2345]'	944
'ATLAS_(?P<version>\\d+[.]\\d+[.]\\d+)_'	356
'.*:(?P<line>\\d+)[ \t]+(?P<message>.*)'	1326
'(<[^>]*?href=["\']|http://[^"\' \\t]+)'	245
'goog\\.require\\([\'"]([^\\)]+)[\'"]\\)'	168
'<[Tt]d class=AgendaText>([^<]+)</[Tt]d>'	126
'goog\\.provide\\([\'"]([^\\)]+)[\'"]\\)'	168
'[QA]?[:.]?\\d?\\d[:;.]\\d\\d[:;.]\\d\\d'	1190
'[\\n]*[\\-]{5}BEGIN CERTIFICATE[\\-]{5}'	1315
"\\s*SELECT\\s+.+?\\s+FROM\\s+[']?(\\w+)"	284
'[igpv\\-][fpn\\-][pob\\-][3\\-][ap\\-]$'	1248
'[-d]  (setuptools|distribute)-\\S+[.]egg'	313
'[^#]*(\\S+)([ \\*]+)(\\S+)\\s*\\([^\\)]*'	413
'([d-]  )?(setuptools|distribute)-\\S+-py'	313
'(?P<whitespace>[ \n]*)(?P<entry>[^ \n]+)'	623
'distribute-\\d+[.]\\d+\\S*-py\\d.\\d.egg'	313
'(\\S+)\\s*[.]\\s*is_f_array\\s*[(]\\s*[)]'	356
'(\'[^\']\'|[-=]+>|"[^"]+"|\'[^\']+\'|\\|)'	1248
'(.+)[-_](\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)'	318
'^(.*)/__pycache__/(.*)\\.(.*)(\\.py[oc])$'	1226
'^#\\s*cython\\s*:\\s*((\\w|[.])+\\s*=.*)$'	1621
'(\\S+)\\s*[.]\\s*is_c_array\\s*[(]\\s*[)]'	356
'^(?P<area>[17]\\d\\d\\d)(?P<station>\\d+)$'	174
'^[ >]+ +(?P<name>[^ ]+) +(?P<value>[^ ]+)$'	439
'\\d+[/-]\\d+[/-]\\d+ \\d+:\\d+:\\d+\\.\\d+'	1488
'(\\s*\\t*max_filesize)\\=(\\d+[kKMmGgTt]?)'	560
'(.+)[-_](\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)'	318
'\\s*(([\\\'"])(.*?[^\\\\])\\2)\\s*([},=]|$)'	727
'[uU]?[rR]?(\\"\\"\\"|\\\'\\\'\\\'|\\"|\\\')'	1248
'(\\d+\\.\\d+\\.\\d+)[T\\.](\\d+(\\.\\d+)*)$'	1025
'^==== ([^#]+)#(\\d+) ==([AMD])== (.*) ====$'	1426
'[\\-]{5}END( RSA| DSA)? PRIVATE KEY[\\-]{5}'	1315
'(\\S+\\s*[(].+),\\s*savespace\\s*=.+\\s*[)]'	356
'(\\S+)\\s*[.]\\s*isbyteswapped\\s*[(]\\s*[)]'	356
'[ \\t\\r\\n]*(?:(?:#[^\\n]*)?\\r?(?:$|\\n))?'	55
'^\\s*-\\s*[Ee]xit.[Cc]ode\\s*=\\s*(.*?)\\s*$'	1205
'(\\S+)\\s*[.]\\s*new\\s*[(]\\s*(\\S+)\\s*[)]'	356
'(?P<who>[ugo]+)(?P<op>[-+])(?P<what>[rwx]+)$'	1580
'[^#]*(\\S+)([ \\*]+)(\\S+)\\s*\\([^\\)]*\\);'	413
'[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?'	380
'^(ip_tables|iptable_filter|iptable_nat)[ \\t]'	826
'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)'	356
'(.*?)(?:\\.(\\d+))?(([-+]\\d{1,2}):(\\d{2}))?$'	425
'(?P<a>[\\<\\>\\!\\=])\\s+(?P<b>[\\<\\>\\!\\=])'	1247
'(\\S+)\\s*[.]\\s*togglebyteorder\\s*[(]\\s*[)]'	356
'^\\(?(\\d{3})\\)?[- .]?(\\d{3})[- .]?(\\d{4})$'	228
'([^=]+)=(\\w+(?:[.]\\w+)*):(\\w+(?:[.]\\w+)*)$'	313
'(\\w+(?:/\\w+)?|[-=]+>|"[^"]+"|\'[^\']+\'|\\|)'	1248
'((?P<hquote>[\\\'"])(?P<htext>.+?)(?P=hquote))|'	190
'\\[commit=(\\d\\d\\d\\d[-/]\\d\\d[-/]\\d\\d)\\]'	173
u'[ \\t]*--[ \\t]*|__[ \\t]*|_[ \\t]+(_[ \\t]+)*'	782
'([\\$\\^\\*\\+\\.\\?\\{\\}\\[\\]\\(\\)\\|\\\\])'	53
'^\\s*([tlrbhwxy])\\s*([!\\?\\*])\\s*(\\d*)\\s*$'	498
'\\d+|>>|<<|[<>!=]=|&&|\\|\\||[-+*/%^&<>?:|!()n]'	782
'([!=]=\\s*(True|False))|((True|False)\\s*[!=]=)'	1054
'^\\x1b\\[0m(.*?)\\x1b\\[0?m[:-](\\d+)([:-])(.*)'	407
'^[ \\t]*LOG[ \\t]*=[ \\t]*(?:(?:Y(?:ES)?)|TRUE)'	534
'^(\\d+) \\. (\\d+) (\\. (\\d+))? ([ab](\\d+))?$'	1580
'(\\S+)\\s*[.]\\s*repeat\\s*[(]\\s*(\\S+)\\s*[)]'	356
'(\\S+)\\s*[.]\\s*setimag\\s*[(]\\s*(\\S+)\\s*[)]'	356
'^(\\d+)(?:([yzafpnumcdhkKMGTPEZY])(i)?)?([Bb])?$'	53
'(\\S+)\\s*[.]\\s*setreal\\s*[(]\\s*(\\S+)\\s*[)]'	356
'(^\\(?(\\d{3})\\)?[- .]?(\\d{3})[- .]?(\\d{4})$)'	228
'<script\\s*src=[\'"](.*)\\.js[\'"]>\\s*</script>'	1007
'type\\s*[(]([^)]*)[)]\\s+(?:is|==)\\s+(.*?float)'	356
'[ ]*(/\\*\\*\\s|\\*/|\\B\\*\\s|//!)(?P<line>.*?)'	706
'[\\t !"#$%&\\\'()*\\-/<=>?@\\[\\\\\\]^_`{|},.:]+'	1340
'([+-])?(?:(?:(\\d?\\d):)?(\\d?\\d):)?(\\d?\\d)\\Z'	873
'([NS])(\\d\\d)_(\\d{6})([EW])(\\d\\d\\d)_(\\d{6})'	1397
'(?P<group>[^,]+?)[.](?P<name>.+?):(?P<value>\\d+)'	440
'(\\S+)\\s*[.]\\s*setshape\\s*[(]\\s*(\\S+)\\s*[)]'	356
'\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*'	47
'(?im)<title>Dailymotion\\s*[\\-:]\\s*(.+?)</title>'	386
"<[fF][oO][nN][tT][ ]*[sS][iI][zZ][eE][ ]*='2'[ ]*>"	110
'(http://(?:www\\.)?s[ia]mplecd\\.\\w+/)(id|entry)/'	1569
'(....)-(..)-(..)T(..):(..):(..)....([+-])(..):(..)'	1116
'[\\n]*[\\-]{5}BEGIN( RSA| DSA)? PRIVATE KEY[\\-]{5}'	1315
'^(?:.:)?[^:]+:(\\d+): \\[([EWRCI]+)[^\\]]*\\] (.*)$'	640
'(zc.buildout|setuptools)( version)? \\d+[.]\\d+\\S*'	313
'(?s)(?<=\\n)([|][|].*?[|][|])(?=\\n[^|]|\\n[|][^|])'	138
'^#[ \\t\\*]*END[ \\t]+LICENSE[ \\t]+BLOCK[ \\t\\*]*'	119
'\\d+/\\d+\\/\\d+\\s+([\x08House\x08|\x08Senate\x08])'	182
'C(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])(.*)\\Z'	80
'[ \t\r\x0c\x0b]*\n[ \t\r\x0c\x0b]*\n[ \t\r\x0c\x0b]*'	1248
'^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'	978
'(\\S+)\\s*[.]\\s*setimaginary\\s*[(]\\s*(\\S+)\\s*[)]'	356
'<![ \r\n\t]*(--([^\\-]|[\r\n]|-[^\\-])*--[ \r\n\t]*)>'	347
'MARIONETTE_HEAD_JS(\\s*)=(\\s*)[\'|\\"](.*?)[\'|\\"];'	1007
'^\\s*\\%\\s*include\\s+([\\"\\<])(.+?)([\\"\\>])(.*)$'	1580
'MARIONETTE_CONTEXT(\\s*)=(\\s*)[\'|\\"](.*?)[\'|\\"];'	1007
'^(\\(*\\d+\\s*[<>=!]+\\s*\\d+\\)*\\s*(and|or)?\\s*)+$'	605
'[r][g][b][(]\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*\\d{1,3}[)]'	1025
'^\\s*\\#\\s*include\\s+([\\"\\<])(.+?)([\\"\\>])(.*)$'	1580
'(\\d\\d?):(\\d\\d)(:(\\d\\d))? *([aApP]\\.?[mM]\\.?)?$'	497
'(zc.buildout|setuptools)-\\d+[.]\\d+\\S*-py\\d.\\d.egg'	313
'\\A[\\+\\-]?\\d+(?:W\\d+)?(?:T\\d+(?:Z|[+-]\\d+)?)?\\Z'	1571
'^(?P<area>[235]\\d)(?P<area2>\\d{4})(?P<station>\\d+)$'	174
'\\A\\s*(?:\\.\\..*\n)*\\s*----+[ ]*\n(.*)\n----+[ ]*\n'	1470
'[-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?'	758
'\xd0\xbf\xd1\x83\xd1\x88\xd0\xba\xd0\xb8\xd0\xbd[e .\n]'	1122
'^(\\s+arrayObject\\w*\\s*=\\s*[(])[(]PyObject\\s*[*][)]'	356
'^\\s*_*version\\s*_*\\s*=\\s*["\\\']([^"\\\']+)["\\\'].*'	1621
'^Unit +([01])- \\[ *(-?\\d+)- *(-?\\d+)\\] \\[(\\w+)\\]$'	1302
'#date(\\s+(\\S+))?\\s+(\\d\\d\\d\\d[-/]\\d\\d[-/]\\d\\d)'	173
'(--(?P<key>\\S*)[=](?P<value>\\S*))|(--(?P<option>\\S*))'	1459
'^\\s*Attribute [Nn]ame\\s+Tag\\s+Type\\s+Description\\s*$'	1432
'^(?P<neg>-?)(?P<Y>\\d{4,})(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'^[^\'"]*[\'"]([^\'"]*)[\'"]\\s*:\\s*[\'"]([^\'"]*)[\'"].*$'	1247
'^(?P<key>[^ =]+) *= *[\\"\']?(?P<value>[^\\"\']*)[\\"\']?$'	826
'([-+]?(?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[dD]((?:[-+]?\\d+)?)'	356
'^(?P<neg>-?)---(?P<M>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'^(?P<neg>-?)---(?P<D>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'[-][-]((f(90)?compiler([-]exec|)|compiler)=|help[-]compiler)'	356
'[\\(\\[]\\s?(\\d+)\\s?,\\s?(\\d+)\\s?,\\s?(\\d+)\\s?[\\)\\]]'	727
'[-!"#$%&\\\'\\(\\)\\*\\+,\\./:;<=>^\\?@\\[\\]\\\\\\_`{\\|}~]'	1488
'^(?P<start>\\s*)(?P<xy>[x|y]\\s+)(?P<num>\\d+)(?P<end>\\s*)$'	600
'<link\\s*rel=[\'"]stylesheet[\'"]\\s*href=[\'"]([^=>]*)[\'"]>'	1007
'\\[((\\d+(\\.\\d*)?)([wdhms]?)/)?(\\d+(\\.\\d*)?)([wdhms])\\]$'	173
'^[ \\t\\*]*END[ \\t]+LICENSE[ \\t]+BLOCK[ \\t]*\\*+[ \\t]+\\*+/'	119
'(?P<constr>CHECK \\(.*\\))(?P<any>.*)(?P<default>DEFAULT [0|1])'	619
'([^@#:]*)[@:]([^#:]+)?(?::(\\d+(?:-\\d+)?(?:,\\d+(?:-\\d+)?)*))?'	1258
'^(?P<user>[ugo]{0,3})(?P<action>[\\+\\-])(?P<value>[rwxst]{1,3})$'	826
'(\\w+(?:/\\w+)?|\\[[01]?\\.\\d+\\]|[-=]+>|"[^"]+"|\'[^\']+\'|\\|)'	1248
'(?P<all>\\{\\{\\s*include\\s+[\'"](?P<name>[^\'"]*)[\'"]\\s*\\}\\})'	1247
'-[rwx-]{9} +(\\d+) (\\d{4}/\\d\\d/\\d\\d \\d\\d:\\d\\d:\\d\\d) (.*)'	560
'(d  ((ext)?demo(needed)?|other)-\\d[.]\\d-py)\\d[.]\\d(-\\S+)?[.]egg'	313
'Stream\\s*(.*?)[,|:|\\(|\\[].*?\\s*Video:\\s*(.*?),\\s*(\\d*)x(\\d*)'	415
'B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])'	80
'[-][-]((no[-]|)(wrap[-]functions|lower)|debug[-]capi|quiet)|[-]include'	356
'^(?P<neg>-?)(?P<Y>\\d{4,})-(?P<M>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'(?P<pbs>\\\\*)(?P<escSeq>(?P<inv>[\\^])?\\\\(?P<pP>[pP]){(?P<id>[^}]*)})'	866
'[ \t\r\x0c\x0b]*\n[ \t\r\x0c\x0b\n]*|^[ \t\r\x0c\x0b]+|[ \t\r\x0c\x0b]+$'	313
'^(?P<neg>-?)--(?P<M>\\d\\d)-(?P<D>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'^((cdef +(extern|class))|cimport|(from .+ cimport)|(from .+ import +[*]))'	1621
'^\\s*([tlrbhwxy])\\s*([=%<>^_])\\s*([tlrbhwxy]?)\\s*(\\d*)\\s*#(\\d+)\\s*$'	498
'^(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})\\.(\\d{6})([+|-])(\\d{3})'	225
'([-+]?((?:\\d+(?:\\.\\d*)?|\\d*\\.\\d+))[eE]((?:[-+]?\\d+)?)|(\\d+\\.\\d*))'	356
'(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s.\\w+Type|\\s*\\(\\s*([^)]*[^ )])\\s*\\))'	1025
'[-][-]((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help[-]fcompiler))'	356
'Stream\\s*(.*?)[,|:|\\(|\\[].*?\\s*Video:\\s*(.*?),\\s*(.*?),\\s*(\\d*)x(\\d*)'	415
'(\\d+\\.?\\d*)\\s*(second|minute|hour|day|week|month|year|[hdwmy])s?\\s*(?:ago)?$'	1258
'[r][g][b][a][(]\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*\\d{1,3}[,][ ]*(\\d+|\\d*\\.\\d+)[)]'	1025
'^\\d+(?:\\.\\d+)+(?:(?:[abc]|rc)\\d+(?:\\.\\d+)*)?(?:\\.post\\d+)?(?:\\.dev\\d+)?$'	405
'State\\s+(?:Senator|Representative)\\n(.*?)\\n([R|D]).*?[\\n]*(\\d+)(?:st|nd|rd|th)'	182
'[Ee]rr(or)?: (?P<error>.+?(Could not match (?P<near>.+?))?) at /.+?:(?P<line>\\d+)?'	1025
'^(?P<neg>-?)(?P<Y>\\d{4,})-(?P<M>\\d\\d)-(?P<D>\\d\\d)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'\n^\ncreate \\s+ (?: or \\s+ replace \\s+ )?\nfunction ( [^(]+ )\n[(] ( [^)]* ) [)]\n'	1520
'^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{1,6})?Z?([\\+\\-]\\d{2}:?\\d{2})?$'	1580
'^(?P<position>[cj]?(?:ob|fl|fi|fe|fn))=\\s*(?:\\((?P<id>\\d+)\\))?(?:\\s*(?P<name>.+))?'	1576
'^(?P<neg>-?)(?P<h>\\d\\d):(?P<m>\\d\\d):(?P<s>\\d*(\\.\\d+)?)(?P<tz>Z|([-+]\\d\\d:\\d\\d))?$'	1076
'(\\s*DRI_CONF_ENUM\\s*\\([^,]+,\\s*)(gettext\\s*\\(\\s*")(.*)("\\s*\\))(\\s*\\)[ \\t]*\\\\?)$'	533
'(?P<line>([^"]*["][^"]*["][^"!]*|[^\\\']*\\\'[^\\\']*\\\'[^\\\'!]*|[^!\\\'"]*))!{1}(?P<rest>.*)'	356
'B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5}).*\\Z'	80
'(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d+)?)(?:(Z)|([+-])(\\d{2}):(\\d{2}))'	348
'OUT p\\d+ (\\d\\d):(\\d\\d):(\\d\\d) ([NS])\\s*(\\d+):(\\d+\\.\\d+) ([EW])\\s*(\\d+):(\\d+\\.\\d+)'	80
'B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})\\d*\\Z'	80
'^\\s*void\\s*operator\\s*=\\s*\\(\\s*const\\s*\\s*&\\s*\\)\\s*;\\s*\\/\\/\\s*Not\\s*[iI]mplemented(\\.)*'	557
'(?x)\n            [\\r\\n]+(\\S+)\n            [\\r\\n]+(\\S+)\n            [\\r\\n]+.+[\\r\\n]+(\\S+)\n'	1488
"[Ee]rr(or)?: (?P<error>.+?(Syntax error at \\'(?P<near>.+?)\\'; expected \\'.+\\')) at /.+?:(?P<line>\\d+)?"	1025
'(?i)\\<(?:link)\\s.*?rel\\s*\\=\\s*[\\"\\\']shorturl[\\"\\\'].*?href\\s*\\=\\s*[\\"\\\'](.*?)[\\"\\\'].*?\\>'	104
'\n    ^(?P<ending>\\w+)\n    (?P<intact>[*]?)\n    (?P<num>\\d+)\n    (?P<append>\\w*)\n    (?P<cont>[.>])\n    '	1184
'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})[T ](?P<hr>\\d{2}):(?P<min>\\d{2}):(?P<sec>\\d{2})(?P<sec_frac>\\.\\d+)?'	1155
'\n        ^[ ]*:\\w+:.*\\n                     # :option:\n        (.*\\S.*)*                          # non-blank lines\n        '	1248
'\n        ^[ ]*:\\w+:.*\\n                     # :option:\n        (.*\\S.*\\n)*                          # non-blank lines\n        '	1248
'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})[T_ ](?P<hour>\\d{2}):(?P<minute>\\d{2}):(?P<second>\\d{2})(?P<subsecond>\\.\\d+)?Z?'	1469
'^(?P<neg>-?)(?P<Y>\\d{4,})-(?P<M>\\d\\d)-(?P<D>\\d\\d)T(?P<h>\\d\\d):(?P<m>\\d\\d):(?P<s>\\d*(\\.\\d+)?)(?P<tz>(Z|([-+]\\d\\d:\\d\\d))?)$'	1076
'(?x)\n        \\[\\s*\\]\n    |   \\(\\s*\\)\n    |   \\+\\+ | --\n    |   ->\\*? | \\,\n    |   (<<|>>)=? | && | \\|\\|\n    |   [!<>=/*%+|&^~-]=?\n'	1087
'(?x)\n            [\\r\\n]+(\\S+)\\ \n            (\\S+)\\ +!\\ Time\\ domain.\\ *[\\r\\n]+\n            (\\S+)\\ +!\\ Number\\ of\\ tiers.\\ *[\\r\\n]+"\n'	1488
'(?x)\n        \\[\\s*\\]\n    |   \\(\\s*\\)\n    |   [!<>=/*%+|&^-]=?\n    |   \\+\\+ | --\n    |   (<<|>>)=? | ~ | && | \\| | \\|\\|\n    |   ->\\*? | \\,\n'	251
'\n       (^\\.\\.[ ]*pylisting::.*\\n         # directive\n            (?:[ ]*\\n|                   # blank line or\n               [ ]+.*\\n)*)               #   indented line\n        '	1248
'\n       (^\\.\\.[ ]*pylisting::[ ]?\\S*\\n    # directive\n            (?:[ ]*\\n|                   # blank line or\n               [ ]+.*\\n)*)               #   indented line\n        '	1248
'\n        (?:^[^ ].*\\n                       # non-blank line\n            (?:[ ]*\\n |                    # blank line or\n               [ ]+.*\\n)*)                 #   indented line\n        '	1248
'(?x)^\n        (?P<op>[<>]=?|~>?=?)?\n        (?:(?P<major>\\d+|[xX*])\n         (?:\\.(?P<minor>\\d+|[xX*])\n          (?:\\.(?P<patch>\\d+|[xX*]))?\n         )?\n        )\n        (?P<other>.*)$'	1025
'(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:\\.(?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$'	1158
'\n        \\s*\n        (?P<rows>\\d+)\n        [ ]\n        (?P<cols>\\d+)\n        (?P<grid>.*?)\n        (?P<wrap>WRAP|NO_WRAP)\n        \\s+\n        (?P<num_words>\\d+)\n        \\s\n        (?P<words>.*)\n    '	1222
'\\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<alt>\\#)?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\\d+)?\n(?P<thousands_sep>,)?\n(?:\\.(?P<precision>0|(?!0)\\d+))?\n(?P<type>[eEfFgGn%])?\n\\Z\n'	1580
"\n    (                       # Wrap whole match in $1\n     (\n       ^[ \\t]*>[ \\t]?       # '>' at the start of a line\n       .+\\n                 # rest of the first line\n       (.+\\n)*              # subsequent consecutive lines\n       \\n*                  # blanks\n      )+\n    )"	55
"\n    (                       # Wrap whole match in $1\n     (\n       ^[ \\t]*&gt;[ \\t]?       # '>' at the start of a line\n       .+\\n                 # rest of the first line\n       (.+\\n)*              # subsequent consecutive lines\n       \\n*                  # blanks\n      )+\n    )"	200
'\n                                (?P<pre_sep>[ _.-]*)\n                                ((?:s(?:eason|eries)?\\s*)?%0?S(?![._]?N))\n                                (.*?)\n                                (%0?E(?![._]?N))\n                                (?P<post_sep>[ _.-]*)\n                              '	1269
'\n        [^<]*\n        (\n          ((<!--.*?-->)                         |  # comment\n           (<![CDATA[.*?]])                     |  # raw character data\n           (<!DOCTYPE\\s+[^\\[]*(\\[[^\\]]*])?\\s*>) |  # doctype decl\n           (<[^>]*>))                              # tag or PI\n          [^<]*)*\n        \\Z'	1248
'<!-- \\*\\*\\* Reference number \\*\\*\\* -->.*?<font face="arial,helvetica" size=2>(<[BI]>)?(.*?)</FONT>.*?<!-- \\*\\*\\* Motion title \\*\\*\\* -->.*?<A HREF="(.*?)" TARGET="_parent">\\s*<font face="arial,helvetica" size=2>(?:<[BI]>)?([^<]*?)</font></A>\\s*</TD>\\s*<!-- \\*\\*\\* Signatures -->.*?(?:<font face="arial,helvetica" size=2>(?:<[BI]>)?(\\d+) &nbsp;&nbsp;</font>\\s*)?</TD>\\s*<!-- \\*\\*\\* Motion date \\*\\*\\* -->.*?<font face="arial,helvetica" size=2>(?:<[BI]>)?(\\d\\d)\\.(\\d\\d)\\.(\\d\\d)</FONT>(?s)'	32
'\n        # Source consists of a PS1 line followed by zero or more PS2 lines.\n        (?P<source>\n            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line\n            (?:\\n           [ ]*  \\.\\.\\. .*)*)  # PS2 lines\n        \\n?\n        # Want consists of any non-blank lines that do not start with PS1.\n        (?P<want> (?:(?![ ]*$)    # Not a blank line\n                     (?![ ]*>>>)  # Not a line starting with PS1\n                     .+$\\n?       # But any other line\n                  )*)\n        '	1580
'     # A numeric string consists of:\n#    \\s*\n    (?P<sign>[-+])?           # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)           # ...a number (with at least one digit)\n        (?P<int>\\d*)          # consisting of a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?    # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))? # followed by an optional exponent, or...\n    |\n        Inf(inity)?           # ...an infinity, or...\n    |\n        (?P<signal>s)?        # ...an (optionally signaling)\n        NaN                   # NaN\n        (?P<diag>\\d*)         # with (possibly empty) diagnostic information.\n    )\n#    \\s*\n    $\n'	12
